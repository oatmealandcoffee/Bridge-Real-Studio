#tag ClassProtected Class CommandMouseDeleteNoteObjInherits CommandObjImplements Command	#tag Method, Flags = &h21		Private Sub AddChildObjectsToArrays()		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(Notes)		  		  for thisNote = firstNote to lastNote		    if Notes(thisNote) <> nil then		      dim theNote as NoteObj = Notes(thisNote)		      ParentWindow.NoteMgr.Notes.Append(theNote)		    end if		  next		  		  dim thisChord as integer = 0		  dim firstChord as integer = 0		  dim lastChord as integer = Ubound(Chords)		  		  if lastChord > -1 then		    for thisChord = firstChord to lastChord		      if Chords(thisChord) <> nil then		        dim theChord as ChordObj = Chords(thisChord)		        ParentWindow.NoteMgr.Chords.Append(theChord)		      end if		    next		  end if		  		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as integer = Ubound(Groups)		  		  if lastGroup > -1 then		    for thisGroup = firstGroup to lastGroup		      if Groups(thisGroup) <> nil then		        dim theGroup as GroupObj = Groups(thisGroup)		        ParentWindow.NoteMgr.Groups.Append(theGroup)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub AddObjectToArray()		  if ObjectRemoved IsA NoteObj then		    ParentWindow.NoteMgr.Notes.Append(NoteObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA ChordObj then		    ParentWindow.NoteMgr.Chords.Append(ChordObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA GroupObj then		    ParentWindow.NoteMgr.Groups.Append(GroupObj(ObjectRemoved))		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub AddObjectToTrack()		  if MusicObj(ObjectRemoved).Track <> nil then		    MusicObj(ObjectRemoved).Track.AddObject(MusicObj(ObjectRemoved))		  else		    ParentWindow.TrackListObj1.CurrentTrack.AddObject(MusicObj(ObjectRemoved))		    #if DebugBuild		      WindowLog.Log("CommandMouseCreateNoteObj.Redo(): Note.Track = nil")		    #endif		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AddRecordObj(Chord as ChordObj)		  Chords.Append(Chord)		  		  dim CommandChordRecord as CommandChordRecordObj = new CommandChordRecordObj(Chord)		  		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(Chord.Notes)		  		  for thisNote = firstNote To lastNote		    if Chord.Notes(thisNote) <> nil then		      dim Note as NoteObj = Chord.Notes(thisNote)		      AddRecordObj(Note)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AddRecordObj(mGroup as GroupObj)		  Groups.Append(mGroup)		  		  dim CommandGroupRecord as CommandGroupRecordObj = new CommandGroupRecordObj(mGroup)		  CommandUndoRecords.Append(CommandGroupRecord)		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(mGroup.Objects)		  		  for thisObject = firstObject to lastObject		    if mGroup.Objects(thisObject) <> nil then		      		      if mGroup.Objects(thisObject) IsA GroupObj then		        dim Group as GroupObj = mGroup.Objects(thisObject)		        AddRecordObj(Group)		      end if		      		      if mGroup.Objects(thisObject) IsA ChordObj then		        dim Chord as ChordObj = mGroup.Objects(thisObject)		        AddRecordObj(Chord)		      end if		      		      if mGroup.Objects(thisObject) IsA NoteObj then		        dim Note as NoteObj = mGroup.Objects(thisObject)		        AddRecordObj(Note)		      end if		      		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AddRecordObj(Note as NoteObj)		  Notes.Append(Note)		  		  dim CommandNoteRecord as CommandNoteRecordObj = new CommandNoteRecordObj(Note)		  		  CommandUndoRecords.Append(CommandNoteRecord)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AddRecordObjs()		  if ObjectRemoved IsA NoteObj then		    AddRecordObj(NoteObj(ObjectRemoved))		    		  elseif ObjectRemoved IsA ChordObj then		    AddRecordObj(ChordObj(ObjectRemoved))		    		  elseif ObjectRemoved IsA GroupObj then		    AddRecordObj(GroupObj(ObjectRemoved))		    		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub AddRedoRecordObjs()		  return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(mParentWindow as WindowEditor)		  // Part of the Command interface.		  		  // Calling the overridden superclass constructor.		  Super.Constructor		  		  		  ParentWindow = mParentWindow		  		  // we don't have to select an object to delete it when using the mouse, so we have to work around this		  // through AddTopObjectToObjectRemoved and AddRecordObjs. This grabs the state of the objects at the 		  // time of deletion		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Name() As String		  // Part of the Command interface.		  		  dim ObjectType as string = "Music"		  		  if ObjectRemoved IsA NoteObj then ObjectType = "Note"		  if ObjectRemoved IsA ChordObj then ObjectType = "Chord"		  if ObjectRemoved IsA GroupObj then ObjectType = "Group"		  		  #if DebugBuild		    return "CommandMouseDeleteMusicObjObj:" + ObjectType		  #else		    return "Delete " + ObjectType		  #endif		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RecordObject(mNote as NoteObj)		  //we need to the top object so we know what we're deleting		  dim TopObject as MusicObj = ParentWindow.NoteMgr.GetTopObject(mNote)		  		  Track = mNote.Track		  		  if TopObject IsA NoteObj then		    dim Note as NoteObj = NoteObj(TopObject)		    ObjectRemoved = Note		    		  elseif TopObject IsA ChordObj then		    dim Chord as ChordObj = ChordObj(TopObject)		    ObjectRemoved = Chord		    		  elseif TopObject IsA GroupObj then		    dim Group as GroupObj = GroupObj(TopObject)		    ObjectRemoved = Group		    		  end if		  		  AddRecordObjs		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Redo()		  // Part of the Command interface.		  		  //Redo is like Cut here. We remove all references to the object and children in the arrays and track		  		  //AddObjectToArray		  RemoveObjectFromArray		  		  //AddObjectToTrack		  RemoveObjectFromTrack		  		  //AddChildObjectsToArrays		  RemoveChildObjectsFromArrays		  		  //ResetSelectionToObjectRemoved		  ParentWindow.NoteMgr.ClearSelection		  		  UpdateWindow		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RemoveChildObjectsFromArrays()		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(Notes)		  		  for thisNote = firstNote to lastNote		    if Notes(thisNote) <> nil then		      dim theNote as NoteObj = Notes(thisNote)		      ParentWindow.NoteMgr.RemoveObjectFromArray(theNote)		    end if		  next		  		  dim thisChord as integer = 0		  dim firstChord as integer = 0		  dim lastChord as integer = Ubound(Chords)		  		  if lastChord > -1 then		    for thisChord = firstChord to lastChord		      if Chords(thisChord) <> nil then		        dim theChord as ChordObj = Chords(thisChord)		        ParentWindow.NoteMgr.RemoveObjectFromArray(theChord)		      end if		    next		  end if		  		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as integer = Ubound(Groups)		  		  if lastGroup > -1 then		    for thisGroup = firstGroup to lastGroup		      if Groups(thisGroup) <> nil then		        dim theGroup as GroupObj = Groups(thisGroup)		        ParentWindow.NoteMgr.RemoveObjectFromArray(theGroup)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RemoveObjectFromArray()		  if ObjectRemoved IsA NoteObj then		    ParentWindow.NoteMgr.RemoveObjectFromArray(NoteObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA ChordObj then		    ParentWindow.NoteMgr.RemoveObjectFromArray(ChordObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA GroupObj then		    ParentWindow.NoteMgr.RemoveObjectFromArray(GroupObj(ObjectRemoved))		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RemoveObjectFromTrack()		  MusicObj(ObjectRemoved).Track.RemoveObject(MusicObj(ObjectRemoved))		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ResetSelectionToObjectAffected()		  //reset the selection to the object affected by the command once everything is in place		  if ObjectRemoved IsA NoteObj then		    ParentWindow.NoteMgr.ResetSelectionToObject(NoteObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA ChordObj then		    ParentWindow.NoteMgr.ResetSelectionToObject(ChordObj(ObjectRemoved))		  end if		  		  if ObjectRemoved IsA GroupObj then		    ParentWindow.NoteMgr.ResetSelectionToObject(GroupObj(ObjectRemoved))		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Undo()		  // Part of the Command interface.		  		  //Undo is like Paste here. So we add everything back into the arrays and the track		  		  AddObjectToArray		  //RemoveObjectFromArray		  		  AddObjectToTrack		  //RemoveObjectFromTrack		  		  AddChildObjectsToArrays		  //RemoveChildObjectsFromArrays		  		  ResetSelectionToObjectAffected		  //ParentWindow.NoteMgr.ClearSelection		  		  UpdateWindow		End Sub	#tag EndMethod	#tag Note, Name = How this command works		This undoes everything done by ParentWindow.NoteMgr.DestroyObject(MusicObj)				Destroy object removes the object and all of it's children without the clipboard, 		so this needs to become the Clipboard for the action.				Undo will be equivalent to Paste		Redo will be equivalent to Cut				WARNING: There is a lot of typecasting going on here.	#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Label"			Group="Behavior"			Type="String"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="MusicObjCount"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass