#tag ClassProtected Class CommandMusicObjectStateObjInherits CommandObj	#tag Method, Flags = &h0		Sub AddRedoRecordObjs()		  #if kLogMethods		    WindowLog.Log("CommandMusicObjectStateObj.AddRedoRecordObjs")		  #endif		  		  // Part of the Command interface.		  		  dim thisMusicObj as integer = 0		  dim firstMusicObj as integer = 0		  dim lastMusicObj as integer = Ubound(ParentWindow.NoteMgr.Selection)		  		  for thisMusicObj = firstMusicObj to lastMusicObj		    if ParentWindow.NoteMgr.Selection(thisMusicObj) <> nil then		      dim theMusicObj as MusicObj = ParentWindow.NoteMgr.Selection(thisMusicObj)		      		      if theMusicObj IsA NoteObj then		        AddRedoRecordObj(NoteObj(theMusicObj))		        		      elseif theMusicObj IsA ChordObj then		        AddRedoRecordObj(ChordObj(theMusicObj))		        		      elseif theMusicObj IsA GroupObj then		        AddRedoRecordObj(GroupObj(theMusicObj))		        		      end if		      		    end if		  next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(mParentWindow as WindowEditor)		  // Part of the Command interface.		  		  // Calling the overridden superclass constructor.		  Super.Constructor		  		  		  ParentWindow = mParentWindow		  		  if Ubound(mParentWindow.NoteMgr.Selection) <> -1 then		    AddUndoRecordObjs		  else		    #if DebugBuild		      WindowLog.Log("CommandMusicObjectStateObj.Constructor(): Ubound(mParentWindow.NoteMgr.Selection) = -1")		    #endif		  end if		  		  Label = Str(Microseconds)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Redo()		  #if kLogMethods		    WindowLog.Log("CommandMusicObjectStateObj.Redo")		  #endif		  		  // Part of the Command interface.		  		  dim thisMusicObj as integer = 0		  dim firstMusicObj as integer = 0		  dim lastMusicObj as integer = Ubound(Selection)		  		  for thisMusicObj = firstMusicObj to lastMusicObj		    if Selection(thisMusicObj) <> nil then		      dim theMusicObj as MusicObj = Selection(thisMusicObj)		      		      if theMusicObj IsA NoteObj then		        ApplyRedoState(NoteObj(theMusicObj))		        		      elseif theMusicObj IsA ChordObj then		        ApplyRedoState(ChordObj(theMusicObj))		        		      elseif theMusicObj IsA GroupObj then		        ApplyRedoState(GroupObj(theMusicObj))		        		      end if		      		    end if		  next		  		  ResetSelectionToObjectAffected		  		  UpdateWindow		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Undo()		  #if kLogMethods		    WindowLog.Log("CommandMusicObjectStateObj.Undo")		  #endif		  		  // Part of the Command interface.		  		  dim thisMusicObj as integer = 0		  dim firstMusicObj as integer = 0		  dim lastMusicObj as integer = Ubound(Selection)		  		  for thisMusicObj = firstMusicObj to lastMusicObj		    if Selection(thisMusicObj) <> nil then		      dim theMusicObj as MusicObj = Selection(thisMusicObj)		      		      if theMusicObj IsA NoteObj then		        ApplyUndoState(NoteObj(theMusicObj))		        		      elseif theMusicObj IsA ChordObj then		        ApplyUndoState(ChordObj(theMusicObj))		        		      elseif theMusicObj IsA GroupObj then		        ApplyUndoState(GroupObj(theMusicObj))		        		      end if		      		    end if		  next		  		  ResetSelectionToObjectAffected		  		  UpdateWindow		End Sub	#tag EndMethod	#tag Note, Name = How this command works		CommandMusicObjectStateObj is a holder class for a music object's state. There 		are many basic commands that require changes to the state and have nothing		to do with object creation and destruction. This class contains all of those 		methods that are concerned with capturing and applying the state at undo and redo.				On MouseDown()		Set CommandMouseMoveObj to current command		Constructor 		* gets the parent window		* calls AddUndoRecordObjs		** AddUndoRecordObjs will collect all of the items in selections and record their state before the move				On MouseUp()		* AddRedoRecordObjs		** AddRedoRecordObjs goes through all of the items in the selection and records their state AFTER the move		* Clear CommandMgr.CurrentCommand							#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Label"			Group="Behavior"			Type="String"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="MusicObjCount"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="CommandObj"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass