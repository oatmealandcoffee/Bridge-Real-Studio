#tag ClassProtected Class KeyObjInherits MusicObj	#tag Method, Flags = &h0		Sub CalculatePitches()		  //if the user is changig the key, then get ready to calculate the new pitches by clearing the current ones.		  redim Pitches(-1)		  redim StepValuesString(-1)		  redim PitchesBuffer(-1)		  		  dim i, n, x, y, z as integer		  		  //get the key information		  //Major=2 2 1 2 2 2 1		  dim KeyInfo(-1) as string		  KeyInfo = Split(Key, "=")		  		  //parse key name		  TonicName = MusicLib.GetNoteName(Tonic)		  Name = TonicName + " " + KeyInfo(0)		  		  //Make step values string array out of second part		  dim StepValues(-1) as integer		  StepValuesString = Split(KeyInfo(1), " ")		  		  for i = 0 to UBound(StepValuesString)		    StepValues.Append Val(StepValuesString(i))		  next		  		  //the user can click on any pitch on the keyboard, so let's take this back to C1.		  dim StartPitch as integer		  Tonic = GetKeyTonicFromPitchValue(Tonic) //this reduces the user supplied value down to the C1 octave for drawing later.		  StartPitch = Tonic		  		  //iterate through the step values until we come to the top of the C1 octave		  dim StepIndex as integer = 0//this is a placeholder for when we're done iterating through the step values		  dim lastPitch as integer //this is the buffer variable so we can check the do...loop		  		  //all keys start with the tonic.		  PitchesBuffer.Append StartPitch		  		  //start from the Tonic and go to the top of the C1 octave		  lastPitch = StartPitch		  do until StepIndex = Ubound(StepValues)		    lastPitch = lastPitch + StepValues(StepIndex)		    PitchesBuffer.Append lastPitch		    StepIndex = StepIndex + 1		  loop		  		  //brng down those pitches that fall outside of the C1 octave		  for i = Ubound(PitchesBuffer) DownTo 0		    if PitchesBuffer(i) > 11 then PitchesBuffer(i) = PitchesBuffer(i) - 12		  next		  		  PitchesBuffer.Sort		  		  //make the C1 octave pitches "live"		  for i = 0 to ubound(PitchesBuffer)		    Pitches.Append PitchesBuffer(i)		  next		  		  //calculate the notes for the rest of the octaves.		  for i = 12 to 132 step 12		    for n = 0 to Ubound(PitchesBuffer)		      Pitches.Append i + PitchesBuffer(n)		    next		  next		  		  //trim off the pitches > 127; we could probably do this up here		  for i = Ubound(Pitches) DownTo 0		    if Pitches(i) > 127 then		      Pitches.Remove(i)		    end if		  next		  		  'if DataLib.GetFlag(DataLib.kFlagKeyMod_PentatonicMajor, Settings) then //1 2 3 5 6; 4 7		  'for i = Ubound(Pitches) DownTo 0 step 7		  'Pitches.Remove(i)		  'Pitches.Remove(i - 3)		  'next		  'end if		  '		  'if DataLib.GetFlag(DataLib.kFlagKeyMod_PentatonicMinor, Settings) then //1 3 4 5 7; 2 6		  'for i = Ubound(Pitches) DownTo 0 step 7		  'Pitches.Remove(i - 1)		  'Pitches.Remove(i - 5)		  'next		  'end if		  		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetKeyTonicFromPitchValue(Pitch as integer) As Integer		  //this is called from [don't know where yet]		  //A user is supposed to be able to pick any note on the keyboard and set the key.		  //since the tonic is based on those pitched in the C1 octave, this does the math to sort out		  //which tonic it really is (0-12) and allow the KeyObj be able to calculate the pitches		  //in the requested key.		  		  dim KeyTonic as integer		  		  //go through the ranges		  if Pitch >= 0 and Pitch < 12 then		    KeyTonic = Pitch		  elseif Pitch >= 12 and Pitch < 24 then		    KeyTonic = Pitch - 12		  elseif Pitch >= 24 and Pitch < 36 then		    KeyTonic = Pitch - 24		  elseif Pitch >= 36 and Pitch < 48 then		    KeyTonic = Pitch - 36		  elseif Pitch >= 48 and Pitch < 60 then		    KeyTonic = Pitch - 48		  elseif Pitch >= 60 and Pitch < 72 then		    KeyTonic = Pitch - 60		  elseif Pitch >= 72 and Pitch < 84 then		    KeyTonic = Pitch - 72		  elseif Pitch >= 84 and Pitch < 96 then		    KeyTonic = Pitch - 84		  elseif Pitch >= 96 and Pitch < 108 then		    KeyTonic = Pitch - 96		  elseif Pitch >= 108 and Pitch < 120 then		    KeyTonic = Pitch - 108		  elseif Pitch >= 120 and Pitch < 127 then		    KeyTonic = Pitch - 120		  end if		  		  return KeyTonic		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPitchIndex(ThePitch as integer) As Integer		  dim thisPitch as integer = 0		  dim firstPitch as integer = 0		  dim lastPitch as integer = UBound(Pitches)		  		  for thisPitch = firstPitch to lastPitch		    dim mPitch as integer = Pitches(thisPitch)		    if mPitch = ThePitch then		      return thisPitch		    end if		  next		  		  return UBound(Pitches) \ 2		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPitchInKeyAbove(Pitch as integer) As Integer		  dim thisPitch as integer = 0		  dim firstPitch as integer = 0		  dim lastPitch as integer = Ubound(Pitches)		  		  for thisPitch = lastPitch DownTo firstPitch		    dim thePitch as integer = Pitches(thisPitch)		    if thePitch > Pitch then return thePitch		  next		  		  Return MIDILib.kMIDINoteCount - 1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPitchInKeyAboveIndex(Pitch as integer) As Integer		  dim thisPitch as integer = 0		  dim firstPitch as integer = 0		  dim lastPitch as integer = Ubound(Pitches)		  		  for thisPitch = lastPitch DownTo firstPitch		    dim thePitch as integer = Pitches(thisPitch)		    if thePitch > Pitch then return thisPitch		  next		  		  return UBound(Pitches)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPitchInKeyBelow(Pitch as integer) As Integer		  dim thisPitch as integer = 0		  dim firstPitch as integer = 0		  dim lastPitch as integer = Ubound(Pitches)		  		  for thisPitch = firstPitch To lastPitch		    dim thePitch as integer = Pitches(thisPitch)		    if thePitch < Pitch then return thePitch		  next		  		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPitchInKeyBelowIndex(Pitch as integer) As Integer		  dim thisPitch as integer = 0		  dim firstPitch as integer = 0		  dim lastPitch as integer = Ubound(Pitches)		  		  for thisPitch = firstPitch To lastPitch		    dim thePitch as integer = Pitches(thisPitch)		    if thePitch < Pitch then return thisPitch		  next		  		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsPitchWithinKey(Pitch as integer) As Integer		  //this is called by GUIObj.DrawKeys to show those pitches in key.		  //this is also called by ChordObj.CalculatePitches to determine if the root is in key and what the index is to go up the steps for the chord.		  //it will also be called by ACS to determine if the pitch created is in key		  		  //this assumes that the Pitches array has been populated.		  //this returns the index of the pitch or -1 if the pitch isn't in the array		  		  dim i as integer		  dim pitchCount as integer = Ubound(Pitches)		  dim checkPitch as integer		  		  dim foundPitch as integer = -1		  		  for i = 0 to pitchCount		    checkPitch = Pitches(i)		    if pitch = checkPitch then foundPitch = i		  next		  		  return foundPitch		End Function	#tag EndMethod	#tag Note, Name = CalculatePitches Brainstorm		//If the Key or the tonic wasn't set properly default to C major.		If Key = "" then Key = MusicLib.kKeyMajor		If Tonic < 0 or Tonic > 127 then Tonic = 0				//get the key information		//Major=2 2 1 2 2 2 1		dim KeyInfo(-1) as string		KeyInfo = Split(Key, "=")				//parse key name		TonicName = MusicLib.GetNoteName(Tonic)		Name = TonicName + " " + KeyInfo(0)				//Make step values integer array out of second part		dim StepValues(-1) as integer		StepValues = Split(KeyInfo(1), " ")				//now we get all the values in the C1 octave because this is the basis for the rest of the octaves		dim StartNote as integer		StartNote = GetKeyTonicFromPitchValue(Tonic)				We iterate up the scale until we get to a pitch > 11.		From there, we need to calculate how far up the step values we went and then back track.				C1 note calculation begins with the tonic itself. The step values then move up from there.		The last step value bring us back to the tonic in the next octave	#tag EndNote	#tag Note, Name = Known Bugs		All new bug reports need to go to MusicSketchBugs.003				[FIXED] The following tonics aren't doing the correct math		The sequenced notes show the same note.		//1 @ 6-7		//3 @ 7-8		//5 @ 1-2		//8 @ 3-4		//10 @ 4-5	#tag EndNote	#tag Property, Flags = &h0		Key As String	#tag EndProperty	#tag Property, Flags = &h0		Modifier As Integer	#tag EndProperty	#tag Property, Flags = &h0		Pitches(-1) As Integer	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Make Private when not troubleshooting		#tag EndNote		PitchesBuffer(-1) As Integer	#tag EndProperty	#tag Property, Flags = &h0		Settings As Integer	#tag EndProperty	#tag Property, Flags = &h0		Song As SongMgrObj	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			This will eventually be called by the new ruler to show where keys change.		#tag EndNote		StartBeat As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Make Private when not troubleshooting		#tag EndNote		StepValuesString(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			This is based on the 0-12 MIDI Note values in the C11 octave			-1 means no value		#tag EndNote		Tonic As Integer = -1	#tag EndProperty	#tag Property, Flags = &h0		TonicName As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Hidden"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="ID"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Key"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Label"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Length"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Locked"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Modifier"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="OldLength"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="OldPitch"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="OldStartBeat"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Pitch"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Selected"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MusicObj"		#tag EndViewProperty		#tag ViewProperty			Name="Settings"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="StartBeat"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Tonic"			Group="Behavior"			InitialValue="-1"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="TonicName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Velocity"			Group="Behavior"			InitialValue="60"			Type="Integer"			InheritedFrom="MusicObj"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass