#tag ClassProtected Class AppInherits Application	#tag Event		Function CancelClose() As Boolean		  dim OkToQuit as Boolean = WindowMgr.ApplicationQuit		  		  //From the LR:		  //Return True to cause the termination to stop.		  if OkToQuit then 		    return false		  else		    return true		  end if		End Function	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  if Ubound(WindowMgr.Editors) <> -1 then 		    FileClose.Enable		  else		    FileClose.Enabled = false		  end if		  		  if Ubound(WindowMgr.Editors) < 9 then 		    NewEditor.Enable		  else		    NewEditor.Enabled = false		  end if		  		  dim i as integer		  dim EditorMenuItem as EditorMenuItemObj		  		  for i = 0 To (MenuBar1.Child("EditorMenu").Count - 1)		    EditorMenuItem = EditorMenuItemObj(MenuBar1.Child("EditorMenu").Item(i)) //wrapping this command in EditorMenuItemObj avoids an IllegalCastException		    EditorMenuItem.KeyboardShortcut = Str(i)		    EditorMenuItem.Editor.Title = kAppName + " : " + EditorMenuItem.Editor.Name + " : " + kKeyboardShortcutType + Str(i)		  next		End Sub	#tag EndEvent	#tag Event		Sub Open()		  If System.QuickTime.Installed = false then //always the first thing to be done. No quicktime, no playback.		    Beep		    MsgBox "QuickTime is required to run this application."		    Quit		  End if		  		  //this removes the Test menu in the menu bar.		  '#if DebugBuild		  '		  '#else		  'MenuBar1.Remove(MenuBar1.Count - 1)		  '#endif		  		  SplashWindow.Show		End Sub	#tag EndEvent	#tag MenuHandler		Function FileOpen() As Boolean Handles FileOpen.Action			FileLib.Open						Return True		End Function	#tag EndMenuHandler	#tag MenuHandler		Function NewEditor() As Boolean Handles NewEditor.Action			WindowMgr.EditorNew		End Function	#tag EndMenuHandler	#tag MenuHandler		Function TestAbout() As Boolean Handles TestAbout.Action						SplashWindow.Show						Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function TestShowLogWindow() As Boolean Handles TestShowLogWindow.Action			WindowLog.Visible = true						Return True					End Function	#tag EndMenuHandler	#tag Property, Flags = &h0		#tag Note			This flag is here to let the app get everything set before beginning the first draw.			For some reason the event sequence doesn't allow for the GUIObj.ResolutionZ values			to be set to anything, resulting in a StepZ = 0 in the drawing events which leads to			a stalled application.						This gets set to false in WindowEditor.Open(). Everything runs prefectly from then on.						I know, sequences. Who knew? Am I right?		#tag EndNote		Opening As Boolean = True	#tag EndProperty	#tag Constant, Name = kAppCreator, Type = String, Dynamic = False, Default = \"\xC2\xA9 Philip Regan\rhttp://www.oatmealandcoffee.com\rNOT FOR RESALE OR DISTRIBUTION", Scope = Public	#tag EndConstant	#tag Constant, Name = kAppName, Type = String, Dynamic = False, Default = \"[MusicSketch]", Scope = Public	#tag EndConstant	#tag Constant, Name = kEditClear, Type = String, Dynamic = False, Default = \"&Delete", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"&Delete"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"&Delete"	#tag EndConstant	#tag Constant, Name = kFileQuit, Type = String, Dynamic = False, Default = \"&Quit", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"E&xit"	#tag EndConstant	#tag Constant, Name = kFileQuitShortcut, Type = String, Dynamic = False, Default = \"", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"Cmd+Q"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"Ctrl+Q"	#tag EndConstant	#tag Constant, Name = kKeyboardShortcutType, Type = String, Dynamic = True, Default = \"Cmd+", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"Cmd+"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"Ctrl+"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Opening"			Group="Behavior"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass