#tag ClassProtected Class TrackListObjInherits ListBox	#tag Event		Sub CellAction(row As Integer, column As Integer)		  dim Track as TrackObj		  Track = CellTag(row, 0)		  		  //Play/Mute		  Track.Play = CellCheck(row, 1)		  		  //visible		  Track.Visible = CellCheck(row, 2)		  		  me.Update		End Sub	#tag EndEvent	#tag Event		Sub CellTextChange(row as Integer, column as Integer)		  me.CurrentTrack.Name = Cell(row, 4)		  me.Update		End Sub	#tag EndEvent	#tag Event		Sub Change()		  if me.ListCount = 1 then		    ParentWindow.BButtonTrackDelete.Enabled = false		    return		  else		    ParentWindow.BButtonTrackDelete.Enabled = true		  end if		  		  //was 14 track limit; 16 channels in MIDI,  leave one available for drums, leave another available for 0-based drums		  //now a much higher number just to see what happens		  if me.ListCount = 24 then		    ParentWindow.BButtonTrackAdd.Enabled = false		    return		  else		    ParentWindow.BButtonTrackAdd.Enabled = true		  end if		  		  me.Update		End Sub	#tag EndEvent	#tag Event		Sub DoubleClick()		  Dim row,column as Integer		  dim SystemMouseX, SystemMouseY as integer		  dim meLeft, meTop as integer		  dim selfLeft, selfTop as integer		  dim finalX, finalY as integer		  		  SystemMouseX = System.MouseX		  SystemMouseY = System.MouseY		  meLeft = Me.Left		  meTop = Me.Top		  selfLeft = me.ParentWindow.Left		  selfTop = me.ParentWindow.Top		  		  finalX = SystemMouseX - MeLeft - SelfLeft		  finalY = SystemMouseY - MeTop - SelfTop		  		  row = Me.RowFromXY(finalX, finalY)		  column = Me.ColumnFromXY(finalX, finalY)		  		  if row < 0 OR column < 0 then		    beep		    return		  end if		  		  dim Track as TrackObj		  Track = CellTag(row, 0)		  //visible		  //handled in CellAction		  select case column		  case 0 //color		    dim newVisualCue as color		    dim b as boolean		    newVisualCue = Track.VisualCue		    b = SelectColor(newVisualCue, "")		    Track.VisualCue = newVisualCue		  case 1 //audible		    //handled in CellAction event		  case 2 //visible		    //handled in CellAction event		  case 3 //instrument		    dim i as integer		    dim base as new MenuItem		    dim baseReturn as MenuItem		    		    for i = 0 to 129		      if i < 129 then		        base.Append(New MenuItem(str(i) + " - " + MIDILib.GetMIDInstrumentName(i)))		        base.Item(i).Tag = i		      else		        base.Append(New MenuItem(str(MIDILib.kMIDIPercussion) + " - " + MIDILib.GetMIDInstrumentName(MIDILib.kMIDIPercussion)))		        base.Item(i).Tag = MIDILib.kMIDIPercussion		      end if		    next		    		    baseReturn = base.PopUp		    if baseReturn <> nil then		      Track.Instrument = baseReturn.Tag		      Track.NotePlayer.Instrument = baseReturn.Tag		    end if		    		  case 4 //label		    CellType(row, 4) = 3		    //actual Editing and seting to active Track handled in CellTextChange() Event		  end select		  		  me.Update		End Sub	#tag EndEvent	#tag Event		Function DragReorderRows(newPosition as Integer, parentRow as Integer) As Boolean		  'me.Update		  return false		End Function	#tag EndEvent	#tag Event		Function DragRow(drag As DragItem, row As Integer) As Boolean		  'me.Update		  return true		End Function	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  if me.ListCount < 24 then		    NewTrack.Enable		  end if		  		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  return false		End Function	#tag EndEvent	#tag Event		Function MouseDown(x As Integer, y As Integer) As Boolean		  SetFocus		  return false //this has to be false in order for mouse clicks to be dealt with.		End Function	#tag EndEvent	#tag Event		Sub MouseUp(x As Integer, y As Integer)		  me.Update		  me.Refresh		End Sub	#tag EndEvent	#tag Event		Sub Open()		  me.DefaultRowHeight = 20		  me.ColumnCount = 5		  		  //set up the column widths		  dim standardColumnWidth as integer		  dim visualCueColumnWidth as integer		  dim audibleColumnWidth as integer		  dim visibleColumnWidth as integer		  dim instrumentColumnWidth as integer		  dim TrackNameColumnWidth as integer		  		  standardColumnWidth = me.DefaultRowHeight + 2		  visualCueColumnWidth = standardColumnWidth		  audibleColumnWidth = standardColumnWidth		  visibleColumnWidth = standardColumnWidth		  instrumentColumnWidth = standardColumnWidth * 2		  TrackNameColumnWidth = me.Width - visualCueColumnWidth + audibleColumnWidth + visibleColumnWidth + instrumentColumnWidth		  		  ColumnWidths = str(visualCueColumnWidth) + ", " + _		  str(audibleColumnWidth) + ", " + _		  str(visibleColumnWidth) + ", " + _		  str(instrumentColumnWidth) + ", " + _		  str(TrackNameColumnWidth)		  		  //set up the two checkbox columns		  ColumnType(1) = 2 //checkbox		  ColumnType(2) = 2 //checkbox		  		  //set the column headings		  HasHeading = true		  Heading(0) = "C"		  Heading(1) = "A"		  Heading(2) = "V"		  Heading(3) = "Inst"		  Heading(4) = "Label"		  		  //make sure there's a scrollbar when needed.		  ScrollBarVertical = true		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub AddTrack()		  if me.ListCount <= Ubound(ParentWindow.SongMgr.Colors) then		    		    dim i as integer		    dim Track as TrackObj		    dim TrackCount as integer		    		    Track = new TrackObj		    		    //Visual Cue		    Track.VisualCue = ParentWindow.SongMgr.Colors(me.ColorIndex)		    me.ColorIndex = me.ColorIndex + 1		    if ColorIndex > UBound(ParentWindow.SongMgr.Colors) then me.ColorIndex = 0		    		    //metadata		    Track.Name = "Track " + str(me.ListCount + 1)		    Track.Instrument = 1 //piano by default		    Track.Visible = true		    Track.Play = true		    Track.TrackList = me		    		    //Note Player		    CreateNotePlayer(Track)		    		    //add it to the list		    AddTrackToList(Track)		    		    Track.SetNoteList		    		    //show it		    Update		    		    ParentWindow.WindowNeedsSaving = true		    		  else		    		    beep		    		  end if		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub AddTrackToList(Track as TrackObj)		  //called from AddTrack and DuplicateTrack		  dim i as integer		  me.AddRow ""		  me.CellTag(me.ListCount - 1, 0) = Track		  'me.ActiveTrack = me.CellTag(me.ListCount - 1, 0)		  me.Selected(me.LastIndex) = true		  for i = 0 to me.ListCount		    if i <> me.LastIndex then me.Selected(i) = false		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function CloneTrack(Track as TrackObj) As TrackObj		  dim NewTrack as TrackObj = new TrackObj		  		  //first we set the metadata for the new track from the old track		  NewTrack.Instrument = Track.Instrument		  NewTrack.Label = Track.Label		  'NewTrack.Music = Track.Music //Handled in DuplicateTrack,but should be in here, really		  NewTrack.Name = Track.Name		  'NewTrack.NotePlayer = Track.NotePlayer //New track = new NotePlayer		  NewTrack.Play = Track.Play		  NewTrack.TrackList = me		  NewTrack.Visible = Track.Visible		  NewTrack.VisualCue = Track.VisualCue		  		  Return NewTrack		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  // Calling the overridden superclass constructor.		  Super.Constructor		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNotePlayer(Track as TrackObj)		  //called from AddTrack, DuplicateTrack		  		  dim NewNotePlayer as NotePlayer = new NotePlayer		  		  Track.NotePlayer = NewNotePlayer		  Track.NotePlayer.Instrument = Track.Instrument		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DeleteTrack()		  dim i, n, c as integer		  dim RowCount as integer		  dim TrackCount as integer		  dim TrackToDelete as TrackObj		  		  for i = 0 to me.ListCount		    if me.Selected(i) = true then		      		      TrackToDelete = me.CellTag(i, 0)		      		      for n = UBound(TrackToDelete.Music) DownTo 0		        if TrackToDelete.Music(n) <> nil then		          		          if TrackToDelete.Music(n) IsA NoteObj then		            dim thisNote as NoteObj = TrackToDelete.Music(n)		            ParentWindow.NoteMgr.DestroyObject(thisNote)		            		          elseif TrackToDelete.Music(n) IsA ChordObj then		            dim thisChord as ChordObj = TrackToDelete.Music(n)		            ParentWindow.NoteMgr.DestroyObject(thisChord)		            		          elseif TrackToDelete.Music(n) IsA GroupObj then		            dim thisGroup as GroupObj = TrackToDelete.Music(n)		            ParentWindow.NoteMgr.DestroyObject(thisGroup)		            		          end if		          		        end if		      next		      		      me.RemoveRow(i)		      		    end if		  next		  		  me.ColorIndex = me.ColorIndex - 1		  if me.ColorIndex < 0 then me.ColorIndex = UBound(ParentWindow.SongMgr.Colors)		  		  //I think we would prefer that the Track above the one that just got deleted be selected, 		  //but for now, we'll just go with the one we know will exist.		  me.Selected(0) = true		  		  me.Update		  		  ParentWindow.WindowNeedsSaving = true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DuplicateTrack()		  //called from ParentWindow.BButtonTrackDupe.Action()		  		  dim SelectedTrack as TrackObj = CurrentTrack		  if CurrentTrack = nil then		    MsgBox "CurrentTrack returned nothing"		    return		  end if		  dim newTrack as TrackObj = CloneTrack(SelectedTrack)		  		  //second, we clone the music, if there is any		  if UBound(SelectedTrack.Music) > -1 then		    dim thisObject as integer = 0		    dim firstObject as integer = 0		    dim lastObject as integer = Ubound(CurrentTrack.Music)		    		    for thisObject = firstObject to lastObject		      if SelectedTrack.Music(thisObject) <> nil then		        		        if SelectedTrack.Music(thisObject) IsA GroupObj then		          dim mGroup as GroupObj = SelectedTrack.Music(thisObject)		          dim NewGroup as GroupObj = ParentWindow.NoteMgr.CloneObject(mGroup)		          ParentWindow.NoteMgr.AddObjectToArray(NewGroup)		          newTrack.AddObject(NewGroup)		          		        end if		        		        if SelectedTrack.Music(thisObject) IsA ChordObj then		          dim mChord as ChordObj = SelectedTrack.Music(thisObject)		          dim NewChord as ChordObj = ParentWindow.NoteMgr.CloneObject(mChord)		          ParentWindow.NoteMgr.AddObjectToArray(NewChord)		          newTrack.AddObject(NewChord)		          		        end if		        		        if SelectedTrack.Music(thisObject) IsA NoteObj then		          dim mNote as NoteObj = SelectedTrack.Music(thisObject)		          dim NewNote as NoteObj = ParentWindow.NoteMgr.CloneObject(mNote)		          ParentWindow.NoteMgr.AddObjectToArray(NewNote)		          newTrack.AddObject(NewNote)		          		        end if		        		      end if		    next		    		  end if		  		  //create a new NotePlayer and add the track to the list.		  //Note Player		  CreateNotePlayer(newTrack)		  		  //add it to the list		  AddTrackToList(newTrack)		  		  //finally, we show it.		  Update		  		  ParentWindow.WindowNeedsSaving = true		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Update()		  dim i as integer		  dim Track as TrackObj		  dim VisualCuePic as Picture		  		  for i = 0 to me.ListCount - 1		    if ListCount - 1 = 0 then ParentWindow.BButtonNoteDelete.Value = false		    		    Track = me.CellTag(i, 0)		    		    //visual cue		    VisualCuePic = NewPicture(me.DefaultRowHeight - 2, me.DefaultRowHeight - 2, 32)		    if VisualCuePic <> nil then		      VisualCuePic.Graphics.ForeColor = Track.VisualCue		      VisualCuePic.Graphics.FillRect (VisualCuePic.Graphics.Width - VisualCuePic.Graphics.Height)/2, 0, VisualCuePic.Graphics.Height, VisualCuePic.Graphics.Height		      VisualCuePic.Graphics.ForeColor = ParentWindow.SongMgr.kColorBlack		      VisualCuePic.Graphics.DrawRect (VisualCuePic.Graphics.Width - VisualCuePic.Graphics.Height)/2, 0, VisualCuePic.Graphics.Height, VisualCuePic.Graphics.Height		      		      me.RowPicture(i) = VisualCuePic		    end if		    		    me.CellCheck(i, 1) = Track.Play		    me.CellCheck(i, 2) = Track.Visible		    me.Cell(i, 3) = str(Track.Instrument)		    me.Cell(i, 4) = Track.Name		  next		  		  ParentWindow.GUIObj1.Draw		End Sub	#tag EndMethod	#tag Note, Name = How the TrackList works		The upper and lower limit of tracks is maintained in TrackListObj.Change()				The only event used via the interface is the HeaderPressed() and that's		to prevent the user form accidentally sorting the tracks.	#tag EndNote	#tag Note, Name = Known Bugs		[FIXED] Not so much a bug, but would like to be able to drag and drop the order of rows.		Didn't have "Drag Reorder Rows property checked in the Window interface				[ ] I think sometimes if a track isn't the topmost, it won't allow selection of a note.		This could be an issue in GUIObj.MouseDown(), but it's not terribly important at this point.	#tag EndNote	#tag Property, Flags = &h0		ColorIndex As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  dim selectedTrack as TrackObj			  			  dim thisTrack as integer = 0			  dim firstTrack as integer = 0			  dim lastTrack as integer = me.ListCount			  			  for thisTrack = firstTrack to lastTrack			    if me.Selected(thisTrack) then			      selectedTrack = me.CellTag(thisTrack, 0) 			    end if			  next			  			  return selectedTrack			End Get		#tag EndGetter		CurrentTrack As TrackObj	#tag EndComputedProperty	#tag Property, Flags = &h0		ParentWindow As WindowEditor	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="AutoHideScrollbars"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="ColorIndex"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnCount"			Visible=true			Group="Appearance"			InitialValue="1"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnsResizable"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnWidths"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultRowHeight"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDrag"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDragReorder"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesHorizontal"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesVertical"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="HasHeading"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="HeadingIndex"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Hierarchical"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialValue"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="RequiresSelection"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollBarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="SelectionType"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			Type="FontUnits"			EditorType="Enum"			InheritedFrom="ListBox"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollOffset"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollWidth"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="ListBox"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass