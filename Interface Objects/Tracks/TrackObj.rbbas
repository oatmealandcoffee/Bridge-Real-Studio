#tag ClassProtected Class TrackObj	#tag Method, Flags = &h0		Sub AddObject(Chord as ChordObj)		  // NO UNDO/REDO ACTIONS HERE		  //called by paste		  		  SetTrack(Chord)		  		  Music.Append Chord		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = UBound(Chord.Notes)		  		  for thisObject = firstObject to lastObject		    if Chord.Notes(thisObject) <> nil then		      		      dim Note as NoteObj = Chord.Notes(thisObject)		      SetTrack(Note)		      		    end if		  next		  		  SetNoteList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddObject(Group as GroupObj)		  // NO UNDO/REDO ACTIONS HERE		  //called by paste		  		  SetTrack(Group)		  		  Music.Append Group		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = UBound(Group.Objects)		  		  for thisObject = firstObject to lastObject		    if Group.Objects(thisObject) <> nil then		      		      if Group.Objects(thisObject) IsA GroupObj then		        dim mGroup as GroupObj = Group.Objects(thisObject)		        SetTrack(mGroup)		      end if		      		      if Group.Objects(thisObject) IsA ChordObj then		        dim Chord as ChordObj = Group.Objects(thisObject)		        SetTrack(Chord)		      end if		      		      if Group.Objects(thisObject) IsA NoteObj then		        dim Note as NoteObj = Group.Objects(thisObject)		        SetTrack(Note)		      end if		      		    end if		  next		  		  SetNoteList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddObject(mMusicObj as MusicObj)		  if mMusicObj IsA NoteObj then		    AddObject(NoteObj(mMusicObj))		  end if		  		  if mMusicObj IsA ChordObj then		    AddObject(ChordObj(mMusicObj))		  end if		  		  if mMusicObj IsA GroupObj then		    AddObject(GroupObj(mMusicObj))		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddObject(Note as NoteObj)		  // NO UNDO/REDO ACTIONS HERE		  //called by paste		  //called by FileMgrObj.NativeImportObj.TrackMgr_LinkTrackToNote		  		  SetTrack(Note)		  		  Music.Append Note		  		  SetNoteList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  MusicObjCount = ObjectCount		  Description = Str(MusicObjCount)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveObject(Chord as ChordObj)		  // NO UNDO/REDO ACTIONS HERE		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Music)		  		  for thisObject = lastObject DownTo firstObject		    if Music(thisObject) <> nil then		      if Music(thisObject) = Chord then		        Music.Remove(thisObject)		      end if		    end if		  next		  		  SetNoteList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveObject(Group as GroupObj)		  // NO UNDO/REDO ACTIONS HERE		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Music)		  		  for thisObject = lastObject DownTo firstObject		    if Music(thisObject) <> nil then		      if Music(thisObject) = Group then		        Music.Remove(thisObject)		      end if		    end if		  next		  		  SetNoteList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveObject(mMusicObj as MusicObj)		  if mMusicObj IsA NoteObj then		    RemoveObject(NoteObj(mMusicObj))		  end if		  		  if mMusicObj IsA ChordObj then		    RemoveObject(ChordObj(mMusicObj))		  end if		  		  if mMusicObj IsA GroupObj then		    RemoveObject(GroupObj(mMusicObj))		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveObject(Note as NoteObj)		  // NO UNDO/REDO ACTIONS HERE		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Music)		  		  for thisObject = lastObject DownTo firstObject		    if Music(thisObject) <> nil then		      if Music(thisObject) = Note then		        Music.Remove(thisObject)		      end if		    end if		  next		  		  SetNoteList		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub ResetNoteList()		  // NO UNDO/REDO ACTIONS HERE		  		  NoteGroupingList = new Dictionary		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetNoteList()		  // NO UNDO/REDO ACTIONS HERE		  		  //called from TrackObj.AddObject, TrackObj.RemoveObject, TrackListObj.AddTrack		  		  ResetNoteList		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Music)		  		  for thisObject = firstObject to lastObject		    if Music(thisObject) <> nil then		      		      dim theObject as MusicObj = Music(thisObject)		      		      dim thisNote as integer = 0		      dim firstNote as integer = 0		      dim lastNote as integer = UBound(theObject.NoteList)		      		      for thisNote = firstNote to lastNote		        if theObject.NoteList(thisNote) <> Nil then		          		          dim theSingleNote as NoteObj = theObject.NoteList(thisNote)		          NoteGroupingList.Value(theSingleNote) = theObject		          		        end if		      next		      		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SetTrack(Chord as ChordObj)		  // NO UNDO/REDO ACTIONS HERE		  		  Chord.Track = me		  		  dim thisNote as Integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(Chord.Notes)		  		  for thisNote = firstNote to lastNote		    if Chord.Notes(thisNote) <> nil then		      dim Note as NoteObj = Chord.Notes(thisNote)		      SetTrack(Note)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SetTrack(Group as GroupObj)		  // NO UNDO/REDO ACTIONS HERE		  		  Group.Track = me		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Group.Objects)		  		  for thisObject = firstObject to lastObject		    if Group.Objects(thisObject) <> nil then		      		      if Group.Objects(thisObject) IsA GroupObj then		        dim mGroup as GroupObj = Group.Objects(thisObject)		        SetTrack(mGroup)		      end if		      		      if Group.Objects(thisObject) IsA ChordObj then		        dim Chord as ChordObj = Group.Objects(thisObject)		        SetTrack(Chord)		      end if		      		      if Group.Objects(thisObject) IsA NoteObj then		        dim Note as NoteObj = Group.Objects(thisObject)		        SetTrack(Note)		      end if		      		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SetTrack(Note as NoteObj)		  // NO UNDO/REDO ACTIONS HERE		  		  Note.Track = me		End Sub	#tag EndMethod	#tag Note, Name = No UNDOs or REDOs allowed here		Since all of these methods are called from other actions, those actions should handle the Undo and Redos.		These are merely here for object management to support higher level actions.			#tag EndNote	#tag Property, Flags = &h0		Description As String	#tag EndProperty	#tag Property, Flags = &h0		ID As String	#tag EndProperty	#tag Property, Flags = &h0		Instrument As Integer	#tag EndProperty	#tag Property, Flags = &h0		Label As String	#tag EndProperty	#tag Property, Flags = &h0		Level As Integer = 90	#tag EndProperty	#tag Property, Flags = &h0		Music(-1) As Variant	#tag EndProperty	#tag Property, Flags = &h21		Private MusicObjCount As Integer	#tag EndProperty	#tag Property, Flags = &h0		Name As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			//this stores all of the individual notes with their top most grouping objects for smoother drag selection		#tag EndNote		NoteGroupingList As Dictionary	#tag EndProperty	#tag Property, Flags = &h0		NotePlayer As NotePlayer	#tag EndProperty	#tag Property, Flags = &h0		Play As Boolean	#tag EndProperty	#tag Property, Flags = &h0		TrackList As TrackListObj	#tag EndProperty	#tag Property, Flags = &h0		Visible As Boolean	#tag EndProperty	#tag Property, Flags = &h0		VisualCue As Color	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="ID"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Instrument"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Label"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Level"			Group="Behavior"			InitialValue="90"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Play"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="VisualCue"			Group="Behavior"			InitialValue="&h000000"			Type="Color"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass