#tag ModuleProtected Module WindowMgr	#tag Method, Flags = &h1		Protected Function ApplicationQuit() As Boolean		  ApplicationQuitFlag = true		  		  dim allWindowsClosed as boolean = true		  		  //go through each window and run EditorClose		  dim thisEditor as integer = 0		  dim firstEditor as integer = 0		  dim lastEditor as integer = Ubound(Editors)		  		  for thisEditor = lastEditor DownTo firstEditor		    if Editors(thisEditor) <> nil then		      dim theEditor as WindowEditor = Editors(thisEditor)		      allWindowsClosed = EditorClose(theEditor)		    end if		  next		  		  return allWindowsClosed		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub EditorAppend(Editor as WindowEditor)		  Editors.Append Editor		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function EditorClose(Editor as WindowEditor) As Boolean		  if Editor.WindowNeedsSaving then		    		    //I would like to replace this with something else that allows for keyboard shortcuts.		    		    Dim MessageDialogWindow as New MessageDialog  //declare the MessageDialog object		    Dim ButtonPressed as MessageDialogButton //for handling the result		    		    MessageDialogWindow.icon = MessageDialog.GraphicCaution   //display warning icon		    MessageDialogWindow.ActionButton.Caption = "Save"		    		    MessageDialogWindow.CancelButton.Visible = True     //show the Cancel button		    MessageDialogWindow.CancelButton.Cancel = true //map Esc and Cmd+. to the button.		    		    MessageDialogWindow.AlternateActionButton.Visible = True   //show the "Don't Save" button		    MessageDialogWindow.AlternateActionButton.Caption ="Don't Save"		    		    MessageDialogWindow.Message = "Do you want to save the changes you made in the document " + Editor.Name + "?"		    MessageDialogWindow.Explanation = "Your changes will be lost of you don't save them."		    		    ButtonPressed = MessageDialogWindow.ShowModalWithin(Editor)     //display the dialog		    		    Select Case ButtonPressed //determine which button was pressed.		      		    Case MessageDialogWindow.ActionButton //Save		      Editor.FileMgr.Save		      EditorCloseConfirmed(Editor)		      return true		      		    Case MessageDialogWindow.AlternateActionButton		      EditorCloseConfirmed(Editor) //Don't Save		      return true		      		    Case MessageDialogWindow.CancelButton		      return false		      		    End select		    		  else		    EditorCloseConfirmed(Editor)		    return true		    		  end if		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub EditorCloseConfirmed(Editor as WindowEditor)		  EditorRemove(Editor)		  		  dim i as integer		  dim EditorMenuItem as EditorMenuItemObj		  		  for i = (MenuBar1.Child("EditorMenu").Count - 1) DownTo 0		    EditorMenuItem = EditorMenuItemObj(MenuBar1.Child("EditorMenu").Item(i)) //wrapping this command in EditorMenuItemObj avoids an IllegalCastException		    if EditorMenuItem.WindowFound(Editor) then		      MenuBar1.Child("EditorMenu").Remove( i )		      exit		    end		  next		  		  Editor.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub EditorNew()		  if Ubound(Editors) >= 9 then return		  		  Dim Editor As WindowEditor = new WindowEditor		  		  EditorAppend(Editor)		  EditorSetCurrent(Editor)		  		  Editor.Name = "Untitled " + Str(Ubound(Editors) + 1)		  Editor.Title = App.kAppName + " : " + Editor.Name		  		  dim EditorMenuItem as EditorMenuItemObj = new EditorMenuItemObj(Editor)		  EditorMenuItem.Text = Editor.Name		  EditorMenuItem.Tag = Editor		  MenuBar1.Child("EditorMenu").Append(EditorMenuItem)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub EditorRemove(Editor as WindowEditor)		  dim i as integer		  		  for i = Ubound(Editors) DownTo 0		    if Editor = Editors(i) then 		      Editors.Remove(i)		      exit		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub EditorSetCurrent(Editor as WindowEditor)		  CurrentEditor = Editor		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub EditorShow(Editor as WindowEditor)		  //this is called from the Editor menu		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected ApplicationQuitFlag As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected CurrentEditor As WindowEditor	#tag EndProperty	#tag Property, Flags = &h1		Protected Editors(-1) As WindowEditor	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule