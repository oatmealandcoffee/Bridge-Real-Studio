#tag ClassProtected Class PlayThreadObjInherits Thread	#tag Event		Sub Run()		  #if kLogEvents		    Log("PlayThreadObj.Run")		  #endif		  		  //we don't store the values locally because we want to eventually allow the user to change the cursors while the music is playing		  		  do		    //Loop check		    If ParentPlayMgr.LoopPlay then		      if ParentPlayMgr.Position >= ParentPlayMgr.LoopStopCursor.StartBeat then		        ParentPlayMgr.StopAllNotes		        ParentPlayMgr.Position = ParentPlayMgr.LoopStartCursor.StartBeat		      end if		    else		      if ParentPlayMgr.Position >= ParentPlayMgr.StopCursor.StartBeat then		        ParentPlayMgr.StopAllNotes		        ParentPlayMgr.Stop		      end if		    end if		    		    //stop check		    if ParentPlayMgr.StopFlag = true then		      ParentPlayMgr.StopAllNotes		      ParentPlayMgr.Stop		    end if		    		    StopNotes		    PlayNotes		    		    //increment the play position		    ParentPlayMgr.Position = ParentPlayMgr.Position + 1		    		    //delay until next beat		    dim startTime as double = Microseconds //get the current time		    dim delayTime as double = (1000000 * 60) \ ParentPlayMgr.ParentWindow.SongMgr.Tempo \ ParentPlayMgr.ParentWindow.SongMgr.TimeSignatureBasicBeat		    dim currentTime as double		    do		      currentTime = Microseconds - startTime		    loop until delayTime <= currentTime		  loop		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Sub Log(theText as string)		  WindowLog.Log(theText)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayNotes()		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentPlayMgr.ParentWindow.NoteMgr.Notes)		  		  //this loop plays the notes		  for thisNote = firstNote to lastNote		    dim note as NoteObj = ParentPlayMgr.ParentWindow.NoteMgr.Notes(thisNote)		    if note.StartBeat = ParentPlayMgr.Position and note.Track.Visible = true and note.Track.Play = true then		      note.Track.YNotePlayer.Instrument = Note.Track.Instrument		      note.Track.YNotePlayer.playNote(note.Pitch, note.Velocity)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub StopNotes()		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentPlayMgr.ParentWindow.NoteMgr.Notes)		  		  //this loop plays the notes		  for thisNote = firstNote to lastNote		    dim note as NoteObj = ParentPlayMgr.ParentWindow.NoteMgr.Notes(thisNote)		    if note.StartBeat + note.Length = ParentPlayMgr.Position and note.Track.Visible = true and note.Track.Play = true then		      note.Track.YNotePlayer.playNote(note.Pitch, 0)		    end if		  next		End Sub	#tag EndMethod	#tag Property, Flags = &h0		ParentPlayMgr As PlayMgrObj	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Priority"			Visible=true			Group="Behavior"			InitialValue="5"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="StackSize"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="Thread"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass