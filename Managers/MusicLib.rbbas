#tag ModuleProtected Module MusicLib	#tag Method, Flags = &h0		Function GetNoteName(Pitch as integer) As String		  dim Tone as integer		  		  //go through the ranges		  if Pitch >= 0 and Pitch < 12 then		    Tone = Pitch		  elseif Pitch >= 12 and Pitch < 24 then		    Tone = Pitch - 12		  elseif Pitch >= 24 and Pitch < 36 then		    Tone = Pitch - 24		  elseif Pitch >= 36 and Pitch < 48 then		    Tone = Pitch - 36		  elseif Pitch >= 48 and Pitch < 60 then		    Tone = Pitch - 48		  elseif Pitch >= 60 and Pitch < 72 then		    Tone = Pitch - 60		  elseif Pitch >= 72 and Pitch < 84 then		    Tone = Pitch - 72		  elseif Pitch >= 84 and Pitch < 96 then		    Tone = Pitch - 84		  elseif Pitch >= 96 and Pitch < 108 then		    Tone = Pitch - 96		  elseif Pitch >= 108 and Pitch < 120 then		    Tone = Pitch - 108		  elseif Pitch >= 120 and Pitch < 127 then		    Tone = Pitch - 120		  end if		  		  Select Case Tone		  Case 0		    Return "C"		  Case 1		    Return "C#/Db"		  Case 2		    Return "D"		  Case 3		    Return "D#/Eb"		  Case 4		    Return "E"		  Case 5		    Return "F"		  Case 6		    Return "F#/Gb"		  Case 7		    Return "G"		  Case 8		    Return "G#/Ab"		  Case 9		    Return "A"		  Case 10		    Return "A#/Bb"		  Case 11		    Return "B"		  Else		    Return ""		  End Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetOctaveHighNote(theOctave as Octave) As integer		  select case theOctave		  case Octave.C1		    return 11		  case Octave.C2		    return 23		  case Octave.C3		    return 35		  case Octave.C4		    return 47		  case Octave.C5		    return 59		  case Octave.C6		    return 71		  case Octave.C7		    return 83		  case Octave.C8		    return 95		  case Octave.C9		    return 107		  case Octave.C10		    return 119		  case Octave.C11		    return 127		  end select		  		  return 127		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetOctaveLowNote(theOctave as Octave) As integer		  select case theOctave		  case Octave.C1		    return 0		  case Octave.C2		    return 12		  case Octave.C3		    return 24		  case Octave.C4		    return 36		  case Octave.C5		    return 48		  case Octave.C6		    return 60		  case Octave.C7		    return 72		  case Octave.C8		    return 84		  case Octave.C9		    return 96		  case Octave.C10		    return 108		  case Octave.C11		    return 120		  end select		  		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsBlackKey(Tone as integer) As Boolean		  //Octave 1		  'if tone = then return FALSE // A		  'if tone =   then return TRUE // A#		  'if tone =   then return FALSE // B		  if tone = 0 then return FALSE // C		  if tone = 1 then return TRUE // C#		  if tone = 2 then return FALSE // D		  if tone = 3 then return TRUE // D#		  if tone = 4 then return FALSE // E		  if tone = 5 then return FALSE // F		  if tone = 6 then return TRUE // F#		  if tone = 7 then return FALSE // G		  if tone = 8 then return TRUE // G#		  //Octave 2		  if tone = 9 then return FALSE // A		  if tone = 10 then return TRUE // A#		  if tone = 11 then return FALSE // B		  if tone = 12 then return FALSE // C		  if tone = 13 then return TRUE // C#		  if tone = 14 then return FALSE // D		  if tone = 15 then return TRUE // D#		  if tone = 16 then return FALSE // E		  if tone = 17 then return FALSE // F		  if tone = 18 then return TRUE // F#		  if tone = 19 then return FALSE // G		  if tone = 20 then return TRUE // G#		  //Octave 3		  if tone = 21 then return FALSE // A		  if tone = 22 then return TRUE // A#		  if tone = 23 then return FALSE // B		  if tone = 24 then return FALSE // C		  if tone = 25 then return TRUE // C#		  if tone = 26 then return FALSE // D		  if tone = 27 then return TRUE // D#		  if tone = 28 then return FALSE // E		  if tone = 29 then return FALSE // F		  if tone = 30 then return TRUE // F#		  if tone = 31 then return FALSE // G		  if tone = 32 then return TRUE // G#		  //Octave 4		  if tone = 33 then return FALSE // A		  if tone = 34 then return TRUE // A#		  if tone = 35 then return FALSE // B		  if tone = 36 then return FALSE // C		  if tone = 37 then return TRUE // C#		  if tone = 38 then return FALSE // D		  if tone = 39 then return TRUE // D#		  if tone = 40 then return FALSE // E		  if tone = 41 then return FALSE // F		  if tone = 42 then return TRUE // F#		  if tone = 43 then return FALSE // G		  if tone = 44 then return TRUE // G#		  //Octave 5		  if tone = 45 then return FALSE // A		  if tone = 46 then return TRUE // A#		  if tone = 47 then return FALSE // B		  if tone = 48 then return FALSE // C		  if tone = 49 then return TRUE // C#		  if tone = 50 then return FALSE // D		  if tone = 51 then return TRUE // D#		  if tone = 52 then return FALSE // E		  if tone = 53 then return FALSE // F		  if tone = 54 then return TRUE // F#		  if tone = 55 then return FALSE // G		  if tone = 56 then return TRUE // G#		  //Octave 6		  if tone = 57 then return FALSE // A		  if tone = 58 then return TRUE // A#		  if tone = 59 then return FALSE // B		  if tone = 60 then return FALSE // C		  if tone = 61 then return TRUE // C#		  if tone = 62 then return FALSE // D		  if tone = 63 then return TRUE // D#		  if tone = 64 then return FALSE // E		  if tone = 65 then return FALSE // F		  if tone = 66 then return TRUE // F#		  if tone = 67 then return FALSE // G		  if tone = 68 then return TRUE // G#		  //Octave 7		  if tone = 69 then return FALSE // A		  if tone = 70 then return TRUE // A#		  if tone = 71 then return FALSE // B		  if tone = 72 then return FALSE // C		  if tone = 73 then return TRUE // C#		  if tone = 74 then return FALSE // D		  if tone = 75 then return TRUE // D#		  if tone = 76 then return FALSE // E		  if tone = 77 then return FALSE // F		  if tone = 78 then return TRUE // F#		  if tone = 79 then return FALSE // G		  if tone = 80 then return TRUE // G#		  //Octave 8		  if tone = 81 then return FALSE // A		  if tone = 82 then return TRUE // A#		  if tone = 83 then return FALSE // B		  if tone = 84 then return FALSE // C		  if tone = 85 then return TRUE // C#		  if tone = 86 then return FALSE // D		  if tone = 87 then return TRUE // D#		  if tone = 88 then return FALSE // E		  if tone = 89 then return FALSE // F		  if tone = 90 then return TRUE // F#		  if tone = 91 then return FALSE // G		  if tone = 92 then return TRUE // G#		  //Octave 9		  if tone = 93 then return FALSE // A		  if tone = 94 then return TRUE // A#		  if tone = 95 then return FALSE // B		  if tone = 96 then return FALSE // C		  if tone = 97 then return TRUE // C#		  if tone = 98 then return FALSE // D		  if tone = 99 then return TRUE // D#		  if tone = 100 then return FALSE // E		  if tone = 101 then return FALSE // F		  if tone = 102 then return TRUE // F#		  if tone = 103 then return FALSE // G		  if tone = 104 then return TRUE // G#		  //Octave 10		  if tone = 105 then return FALSE // A		  if tone = 106 then return TRUE // A#		  if tone = 107 then return FALSE // B		  if tone = 108 then return FALSE // C		  if tone = 109 then return TRUE // C#		  if tone = 110 then return FALSE // D		  if tone = 111 then return TRUE // D#		  if tone = 112 then return FALSE // E		  if tone = 113 then return FALSE // F		  if tone = 114 then return TRUE // F#		  if tone = 115 then return FALSE // G		  if tone = 116 then return TRUE // G#		  //Octave 11		  if tone = 117 then return FALSE // A		  if tone = 118 then return TRUE // A#		  if tone = 119 then return FALSE // B		  if tone = 120 then return FALSE // C		  if tone = 121 then return TRUE // C#		  if tone = 122 then return FALSE // D		  if tone = 123 then return TRUE // D#		  if tone = 124 then return FALSE // E		  if tone = 125 then return FALSE // F		  if tone = 126 then return TRUE // F#		  if tone = 127 then return FALSE // G		  'if tone = then return TRUE // G#		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsOctave(Tone as integer) As String		  select case Tone		  case 0		    return "C1"		  case 12		    return "C2"		  case 24		    return "C3"		  case 36		    return "C4"		  case 48		    return "C5"		  case 60		    return "C6"		  case 72		    return "C7"		  case 84		    return "C8"		  case 96		    return "C9"		  case 108		    return "C10"		  case 120		    return "C11"		  end select		  		  return "X"		End Function	#tag EndMethod	#tag Note, Name = Basic Music Info		Scales		Major : 2 2 1 2 2 2 1		Natural Minor : 2 1 2 2 1 2 2		Harmonic Minor : 2 1 2 2 1 3 1		Melodic Minor : 2 1 2 2 2 2 1				Scale Mods		Major Pentatonic : 1 2 3 5 6		Minor Pentatonic : 1 3 4 5 7				Modes		Ionian : 2 2 1 2 2 2 1		Dorian : 2 1 2 2 2 1 2		Phyrgian : 1 2 2 2 1 2 2		Lydian : 2 2 2 1 2 2 1		Mixolydian : 2 2 1 2 2 1 2		Aeolian : 2 1 2 2 1 2 2		Locrian : 1 2 2 1 2 2 2				Chords		Major : 1 3 5 : Two whole steps between each note.		Minor : 1 b3 5 : The perfect third is flattened.		Diminished : 1 b3 b5 : Both the third and the fifth are flattened; Eb dim has a double flat on the fifth.		Augmented : 1 3 #5 : The fifth is raised; B aug has a double sharp on the fifth. 				Chord Extensions I		Major Seventh : 1 3 5 7 : 		Minor Seventh : 1 b3 5 b7 : 		Dominant Seventh : 1 3 5 b7 :				Chord Extensions II		Sixth : 1 3 5 6 : Basic triad with perfect Sixth		Ninth : 1 3 5 7 9: 		Eleventh : 1 3 5 7 9 11				Other Chords		Altered : 		Suspended : The third is changed into a Fourth.		Power : : The same as any other chord but with the Third removed.		First Inversion : 3 5 1		Second Inversion : 5 1 3				C1    0    11		C2    12    23		C3    24    35		C4    36    47		C5    48    59		C6    60    71		C7    72    83		C8    84    95		C9    96    107		C10    108    119		C11    120    127	#tag EndNote	#tag Note, Name = How This Works		This creates a KeyObj which contains all of the pitches within the key for the entire MIDI range (0-127).				The notes are created by parsing the constant and doing the math				The lower-most octave (pitches 0-12) contains full octave, and the math is done from there, looping to 127.				The real problem is going backwards from anything higher than that C1 note.				The CheckPitch method looks at the current key in the song, finds the corresponding one in the MusicLib, and		then checks the pitch in question to see if it's in there. It returns a Boolean.	#tag EndNote	#tag Constant, Name = kChordExtension_Eleventh_Major, Type = String, Dynamic = False, Default = \"11", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Eleventh_Minor, Type = String, Dynamic = False, Default = \"b11", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Ninth_Major, Type = String, Dynamic = False, Default = \"9", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Ninth_Minor, Type = String, Dynamic = False, Default = \"b9", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Seventh_Major, Type = String, Dynamic = False, Default = \"7", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Seventh_Minor, Type = String, Dynamic = False, Default = \"b7", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Sixth_Major, Type = String, Dynamic = False, Default = \"6", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordExtension_Sixth_Minor, Type = String, Dynamic = False, Default = \"b6", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordType_Augmented, Type = String, Dynamic = False, Default = \"Augmented\x3D1 3 #5", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordType_Diminished, Type = String, Dynamic = False, Default = \"Diminished\x3D1 b3 b5", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordType_Major, Type = String, Dynamic = False, Default = \"Major\x3D1 3 5", Scope = Protected	#tag EndConstant	#tag Constant, Name = kChordType_Minor, Type = String, Dynamic = False, Default = \"Minor\x3D1 b3 5", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyMajor, Type = String, Dynamic = False, Default = \"Major\x3D2 2 1 2 2 2 1", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyMinor, Type = String, Dynamic = False, Default = \"Minor\x3D2 1 2 2 1 2 2", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyMinorHarmonic, Type = String, Dynamic = False, Default = \"Harmonic Minor\x3D2 1 2 2 1 3 1", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyMinorMelodic, Type = String, Dynamic = False, Default = \"Melodic Minor\x3D2 1 2 2 2 2 1", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyModPentatonicMajor, Type = String, Dynamic = False, Default = \"Major Pentatonic\x3D2 2 3 2 3", Scope = Protected	#tag EndConstant	#tag Constant, Name = kKeyModPentatonicMinor, Type = String, Dynamic = False, Default = \"Minor Pentatonic\x3D4 1 2 4 1", Scope = Protected	#tag EndConstant	#tag Constant, Name = kMaxTempo, Type = Double, Dynamic = False, Default = \"220", Scope = Protected	#tag EndConstant	#tag Constant, Name = kMinTempo, Type = Double, Dynamic = False, Default = \"40", Scope = Protected	#tag EndConstant	#tag Enum, Name = Octave, Type = Integer, Flags = &h0		C1		  C2		  C3		  C4		  C5		  C6		  C7		  C8		  C9		  C10		C11	#tag EndEnum	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule