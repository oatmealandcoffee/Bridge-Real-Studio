#tag ModuleProtected Module MIDILib	#tag Method, Flags = &h0		Function CheckLength(Length as integer) As Integer		  dim lengthBuffer as integer = Length		  		  lengthBuffer = lengthBuffer \ kNoteLength_64 * kNoteLength_64		  		  if lengthBuffer < kNoteLength_64 then lengthBuffer = kNoteLength_64		  		  return lengthBuffer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CheckVelocity(Velocity as integer) As integer		  dim velocityBuffer as integer = Velocity		  		  if velocityBuffer < 0 then velocityBuffer = 0		  if velocityBuffer > kMIDIVelocityMax then velocityBuffer = kMIDIVelocityMax		  		  return velocityBuffer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDottedNoteLength(NoteLength as integer) As Integer		  return NoteLength + (NoteLength \ 2)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetMIDInstrumentName(theValue as integer) As String		  Select Case theValue		  Case 1		    return "Acoustic Grand Piano"		  Case 2		    return "Bright Acoustic Piano"		  Case 3		    return "Electric Grand Piano"		  Case 4		    return "Honky-Tonk Piano"		  Case 5		    return "Rhodes Piano"		  Case 6		    return "Chorused Piano"		  Case 7		    return "Harpsichord"		  Case 8		    return "Clavinet"		  Case 9		    return "Celesta"		  Case 10		    return "Glockenspiel"		  Case 11		    return "Music Box"		  Case 12		    return "Vibraphone"		  Case 13		    return "Marimba"		  Case 14		    return "Xylophone"		  Case 15		    return "Tubular Bells"		  Case 16		    return "Dulcimer"		  Case 17		    return "Draw Organ"		  Case 18		    return "Percussive Organ"		  Case 19		    return "Rock organ"		  Case 20		    return "Church Organ"		  Case 21		    return "Reed Organ"		  Case 22		    return "Accordian"		  Case 23		    return "Harmonica"		  Case 24		    return "Tango Accordian"		  Case 25		    return "Acoustic Nylon Guitar"		  Case 26		    return "Acoustic Steel Guitar"		  Case 27		    return "Electric Jazz Guitar"		  Case 28		    return "Electric Clean Guitar"		  Case 29		    return "Electric Guitar Muted"		  Case 30		    return "Overdriven Guitar"		  Case 31		    return "Distortion Guitar"		  Case 32		    return "Guitar Harmonics"		  Case 33		    return "Wood Bass"		  Case 34		    return "Electric Bass Fingered"		  Case 35		    return "Electric Bass Picked"		  Case 36		    return "Fretless Bass"		  Case 37		    return "Slap Bass 1"		  Case 38		    return "Slap Bass 2"		  Case 39		    return "Synth Bass 1"		  Case 40		    return "Synth Bass 2"		  Case 41		    return "Violin"		  Case 42		    return "Viola"		  Case 43		    return "Cello"		  Case 44		    return "Contrabass"		  Case 45		    return "Tremolo Strings"		  Case 46		    return "Pizzicato Strings"		  Case 47		    return "Orchestral Harp"		  Case 48		    return "Timpani"		  Case 49		    return "Acoustic String Ens. 1"		  Case 50		    return "Acoustic String Ens. 2"		  Case 51		    return "Synth Strings 1"		  Case 52		    return "Synth Strings 2"		  Case 53		    return "Aah Choir"		  Case 54		    return "Ooh Choir"		  Case 55		    return "Synvox"		  Case 56		    return "Orchestra Hit"		  Case 57		    return "Trumpet"		  Case 58		    return "Trombone"		  Case 59		    return "Tuba"		  Case 60		    return "Muted Trumpet"		  Case 61		    return "French Horn"		  Case 62		    return "Brass Section"		  Case 63		    return "Synth Brass 1"		  Case 64		    return "Synth Brass 2"		  Case 65		    return "Soprano Sax"		  Case 66		    return "Alto Sax"		  Case 67		    return "Tenor Sax"		  Case 68		    return "Baritone Sax"		  Case 69		    return "Oboe"		  Case 70		    return "English Horn"		  Case 71		    return "Bassoon"		  Case 72		    return "Clarinet"		  Case 73		    return "Piccolo"		  Case 74		    return "Flute"		  Case 75		    return "Recorder"		  Case 76		    return "Pan Flute"		  Case 77		    return "Bottle Blow"		  Case 78		    return "Shakuhachi"		  Case 79		    return "Whistle"		  Case 80		    return "Ocarina"		  Case 81		    return "Square Lead"		  Case 82		    return "Saw Lead"		  Case 83		    return "Calliope Lead"		  Case 84		    return "Chiff Lead"		  Case 85		    return "Charang Lead"		  Case 86		    return "Voice Lead"		  Case 87		    return "Fifths Lead"		  Case 88		    return "Bass + Lead"		  Case 89		    return "New Age Pad"		  Case 90		    return "Warm Pad"		  Case 91		    return "Polysynth Pad"		  Case 92		    return "Choir Pad"		  Case 93		    return "Bowed Pad"		  Case 94		    return "Metallic Pad"		  Case 95		    return "Halo Pad"		  Case 96		    return "Sweep Pad"		  Case 97		    return "Ice Rain"		  Case 98		    return "Soundtracks"		  Case 99		    return "Crystal"		  Case 100		    return "Atmosphere"		  Case 101		    return "Bright"		  Case 102		    return "Goblin"		  Case 103		    return "Echoes"		  Case 104		    return "Space"		  Case 105		    return "Sitar"		  Case 106		    return "Bano"		  Case 107		    return "Shamisen"		  Case 108		    return "Koto"		  Case 109		    return "Kalimba"		  Case 110		    return "Bagpipe"		  Case 111		    return "Fiddle"		  Case 112		    return "Shanai"		  Case 113		    return "Tinkle Bell"		  Case 114		    return "Agogo"		  Case 115		    return "Steel Drums"		  Case 116		    return "Woodblock"		  Case 117		    return "Taiko Drum"		  Case 118		    return "Melodic Drum"		  Case 119		    return "Synth Tom"		  Case 120		    return "Reverse Cymbal"		  Case 121		    return "Guitar Fret Noise"		  Case 122		    return "Breath Noise"		  Case 123		    return "Seashore"		  Case 124		    return "Bird Tweet"		  Case 125		    return "Telephone Ring"		  Case 126		    return "Helicopter"		  Case 127		    return "Applause"		  Case 128		    return "Gunshot Table"		  Case 16385		    return "Drum Kit"		  Else		    Return "No instrument"		  End Select		  Return "No instrument"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetMIDIPercussionName(theValue as integer) As String		  Select Case theValue		  Case 35    //Acoustic Bass Drum		    Return "ABD"		  Case 36    //Bass Drum 1		    Return "BD1"		  Case 37    //Side Stick		    Return "SS"		  Case 38    //Acoustic Snare		    Return "AS"		  Case 39    //Hand Clap		    Return "HC"		  Case 40    //Electric Snare		    Return "ES"		  Case 41    //Lo Floor Tom		    Return "LFT"		  Case 42    //Closed Hi Hat		    Return "CHH"		  Case 43    //Hi Floor Tom		    Return "HFT"		  Case 44    //Pedal Hi Hat		    Return "PHH"		  Case 45    //Lo Tom Tom		    Return "LTT"		  Case 46    //Open Hi Hat		    Return "OHH"		  Case 47    //Low-Mid Tom Tom		    Return "LMTT"		  Case 48    //Hi-Mid Tom Tom		    Return "HMTT"		  Case 49    //Crash Cymbal 1		    Return "CC1"		  Case 50    //Hi Tom Tom		    Return "HTT"		  Case 51    //Ride Cymbal 1		    Return "RC1"		  Case 52    //Chinese Cymbal		    Return "CC"		  Case 53    //Ride Bell		    Return "RB"		  Case 54    //Tambourine		    Return "T"		  Case 55    //Splash Cymbal		    Return "SC"		  Case 56    //Cowbell		    Return "C"		  Case 57    //Crash Cymbal 2		    Return "CC2"		  Case 58    //Vibraslap		    Return "V"		  Case 59    //Ride Cymbal 2		    Return "RC2"		  Case 60    //Hi Bongo		    Return "HB"		  Case 61    //Lo Bongo		    Return "LB"		  Case 62    //Mute Hi Conga		    Return "MHC"		  Case 63    //Open Hi Conga		    Return "OHC"		  Case 64    //Low Conga		    Return "LC"		  Case 65    //Hi Timbale		    Return "HT"		  Case 66    //Lo Timbale		    Return "LT"		  Else		    Return ""		  End Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNoteLength(theNoteLength as NoteLength) As Integer		  Select Case theNoteLength		  Case NoteLength.Value_01		    Return kNoteLength_01		  Case NoteLength.Value_02		    Return kNoteLength_02		  Case NoteLength.Value_04		    Return kNoteLength_04		  Case NoteLength.Value_08		    Return kNoteLength_08		  Case NoteLength.Value_16		    Return kNoteLength_16		  Case NoteLength.Value_32		    Return kNoteLength_32		  Case NoteLength.Value_64		    Return kNoteLength_64		    		  Case NoteLength.value_01_triplet		    Return GetTripletNoteLength(kNoteLength_01)		  Case NoteLength.value_02_triplet		    Return GetTripletNoteLength(kNoteLength_02)		  Case NoteLength.value_04_triplet		    Return GetTripletNoteLength(kNoteLength_04)		  Case NoteLength.value_08_triplet		    Return GetTripletNoteLength(kNoteLength_08)		  Case NoteLength.value_16_triplet		    Return GetTripletNoteLength(kNoteLength_16)		  Case NoteLength.value_32_triplet		    Return GetTripletNoteLength(kNoteLength_32)		  Case NoteLength.value_64_triplet		    Return GetTripletNoteLength(kNoteLength_64)		    		  Case NoteLength.value_02_dotted		    Return GetDottedNoteLength(kNoteLength_02)		  Case NoteLength.value_04_dotted		    Return GetDottedNoteLength(kNoteLength_04)		  Case NoteLength.value_08_dotted		    Return GetDottedNoteLength(kNoteLength_08)		  Case NoteLength.value_16_dotted		    Return GetDottedNoteLength(kNoteLength_16)		  Case NoteLength.value_32_dotted		    Return GetDottedNoteLength(kNoteLength_32)		  Case NoteLength.value_64_dotted		    Return GetDottedNoteLength(kNoteLength_64)		    		  else		    Return kNoteLength_08		  End Select		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTripletNoteLength(NoteLength as integer) As Integer		  return NoteLength \ 3		End Function	#tag EndMethod	#tag Note, Name = Note Values Justification		/2 Beats to  /3 Beats    Note Value   Triplet Value		64           192         1/1          64		32           96          1/2          32		16           48          1/4          16		8            24          1/8          8		4            12          1/16         4		2            6           1/32         2		1            3           1/64         1				This makes for a longer pixel length for notes, but it ensures		we can do mathematically correct triplet values. In the long run		we need to find a way to zoom out further.				B        11		A#/Bb    10		A        9		G#/Ab    8		G        7		F#/Gb    6		F        5		E        4		D#/Eb    3		D        2		C#/Db    1		C        0				Note    Whole    Dotted    Triplet		01      384      576       128		02      192      288       64		04      96       144       32		08      48       72        16		16      24       36        8		32      12       18        4		64      6        9         2	#tag EndNote	#tag Constant, Name = kMIDINoteCount, Type = Double, Dynamic = False, Default = \"128", Scope = Protected	#tag EndConstant	#tag Constant, Name = kMIDIPercussion, Type = Double, Dynamic = False, Default = \"16385", Scope = Protected	#tag EndConstant	#tag Constant, Name = kMIDIVelocityMax, Type = Double, Dynamic = False, Default = \"127", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_01, Type = Double, Dynamic = False, Default = \"384", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_02, Type = Double, Dynamic = False, Default = \"192", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_04, Type = Double, Dynamic = False, Default = \"96", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_08, Type = Double, Dynamic = False, Default = \"48", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_16, Type = Double, Dynamic = False, Default = \"24\r", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_32, Type = Double, Dynamic = False, Default = \"12", Scope = Protected	#tag EndConstant	#tag Constant, Name = kNoteLength_64, Type = Double, Dynamic = False, Default = \"6", Scope = Protected	#tag EndConstant	#tag Enum, Name = NoteLength, Type = Integer, Flags = &h0		value_01		  value_01_triplet		  value_02		  value_02_triplet		  value_02_dotted		  value_04		  value_04_triplet		  value_04_dotted		  value_08		  value_08_triplet		  value_08_dotted		  value_16		  value_16_triplet		  value_16_dotted		  value_32		  value_32_triplet		  value_32_dotted		  value_64		  value_64_triplet		value_64_dotted	#tag EndEnum	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule