#tag ClassProtected Class PlayMgrObjInherits ManagerObj	#tag Method, Flags = &h0		Sub ClearCursorSelection()		  ParentWindow.PlayMgr.SelectedCursor = nil		  		  StartCursor.Selected = false		  EditCursor.Selected = false		  LoopStartCursor.Selected = false		  LoopStopCursor.Selected = false		  StopCursor.Selected = false		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  'TimeSignatureBeatsPerMeasure = 4		  'TimeSignatureBasicBeat = MIDILib.kNoteLength_04 //48		  		  StartCursor = new StartCursorObj		  StartCursor.StartBeat = 0		  		  dim EditCursorStartBeat as integer = MIDILib.kNoteLength_04 \ 2		  dim LoopStartCursorStartBeat as integer = EditCursorStartBeat * 2		  dim LoopStopCursorStartBeat as integer = LoopStartCursorStartBeat * 2		  dim StopCursorStartBeat as integer = LoopStopCursorStartBeat * 2		  		  EditCursor = new EditCursorObj		  EditCursor.StartBeat = EditCursorStartBeat		  		  LoopStartCursor = new LoopStartCursorObj		  LoopStartCursor.StartBeat = LoopStartCursorStartBeat		  		  LoopStopCursor = new LoopStopCursorObj		  LoopStopCursor.StartBeat = LoopStopCursorStartBeat		  		  StopCursor = new StopCursorObj		  StopCursor.StartBeat = StopCursorStartBeat		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub Log(theText as string)		  WindowLog.Log(theText)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub LoopEntireSong()		  SetStopCursorToEnd		  		  LoopStartCursor.StartBeat = 0		  LoopStopCursor.StartBeat = StopCursor.StartBeat		  		  ParentWindow.Loop_Check.Value = true		  LoopPlay = true		  		  UpdateParentWindow		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Play()		  #if kLogMethods		    Log("PlayMgrObj.Play")		  #endif		  		  //Initialize values		  StopFlag = false		  Position = StartCursor.StartBeat - 1		  'LastPosition = StopCursor.StartBeat //the cursors negate the need for this		  		  //this is already set in the control itself		  'if ParentWindow.Loop_Check.Value = true then 		  'LoopPlay = true		  'else		  'LoopPlay = false		  'end if		  		  //create the thread		  if PlayThread = nil then		    PlayThread = new PlayThreadObj		    PlayThread.ParentPlayMgr = me		  end if		  		  //run it (but kill it first just to be sure)		  if PlayThread <> nil then		    PlayThread.Kill		    PlayThread.Run		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetStopCursorToEnd()		  #if kLogMethods		    Log("PlayMgr.SetStopCursorToEnd")		  #endif		  		  dim StopCursorStartBeat as integer = StopCursor.StartBeat		  dim SongTotalBeats as integer = ParentWindow.SongMgr.TotalBeats		  		  StopCursor.StartBeat = Max(StopCursorStartBeat, SongTotalBeats)		  		  if kLogProcesses then		    Log("StopCursor.StartBeat = Max(" + Str(StopCursorStartBeat) + ", " + Str(SongTotalBeats) + ")" )		  end if		  		  UpdateParentWindow		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Stop()		  #if kLogMethods		    Log("PlayMgrObj.Stop")		  #endif		  		  //reset the controls		  StopFlag = false		  ParentWindow.Play_PB.Default = true		  ParentWindow.Play_PB.Caption = "Play"		  		  //kill it and destroy it as well		  if PlayThread <> nil then		    PlayThread.Kill		    PlayThread = Nil		  end if		  		  StopAllNotes		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub StopAllNotes()		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentWindow.NoteMgr.Notes)		  		  //this loop plays the notes		  for thisNote = firstNote to lastNote		    dim note as NoteObj = ParentWindow.NoteMgr.Notes(thisNote)		    'if note.StartBeat + note.Length >= ParentPlayMgr.Position and note.Track.Visible = true and note.Track.Play = true then		    note.Track.NotePlayer.playNote(note.Pitch, 0)		    'end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub UpdateParentWindow()		  ParentWindow.GUIObj1.Draw		End Sub	#tag EndMethod	#tag Note, Name = How It Works		PlayMgr.Play		   Start new thread		       New thread starts the Timer		       Timer repeats until Stop flag raised or end of song reached.		       Timer looks at all notes, if the start beat is the position, play the note		       If the Startbeat + Length is the position, kill the note (play the note at velocity 0)				PlayMgr.Stop		   Stop the Timer		   Kill the thread		   delete the thread		   Play all notes at velocity 0	#tag EndNote	#tag Note, Name = Known Bugs		All new bug reports need to go to MusicSketchBugs.003				[FIXED] Two or more notes played back to back don't play their full length.		   [ ] Swapped position of note off and note on code so that note off happens FIRST				[FIXED] Music not playing at tempo extremes (or so it seems, the period for the timer is 10 - 36, but the BPMs are for 30-360)		   [ ] (1000 * 60) \ SongMgr.Tempo \ SongMgr.TimeSignatureBasicBeat		   [ ] Ditched the timers and went to a thread holding a do...loop. Et voila! proper play times.	#tag EndNote	#tag Property, Flags = &h0		EditCursor As EditCursorObj	#tag EndProperty	#tag Property, Flags = &h0		LastPosition As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mLoopPlay			End Get		#tag EndGetter		#tag Setter			Set			  mLoopPlay = value			End Set		#tag EndSetter		LoopPlay As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h0		LoopStartCursor As LoopStartCursorObj	#tag EndProperty	#tag Property, Flags = &h0		LoopStopCursor As LoopStopCursorObj	#tag EndProperty	#tag Property, Flags = &h21		Private mLoopPlay As Boolean	#tag EndProperty	#tag Property, Flags = &h0		PlayThread As PlayThreadObj	#tag EndProperty	#tag Property, Flags = &h0		Position As Integer	#tag EndProperty	#tag Property, Flags = &h0		SelectedCursor As CursorObj	#tag EndProperty	#tag Property, Flags = &h0		StartCursor As StartCursorObj	#tag EndProperty	#tag Property, Flags = &h0		StopCursor As StopCursorObj	#tag EndProperty	#tag Property, Flags = &h0		StopFlag As Boolean = false	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="LastPosition"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="LoopPlay"			Group="Behavior"			InitialValue="false"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Position"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="StopFlag"			Group="Behavior"			InitialValue="false"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass