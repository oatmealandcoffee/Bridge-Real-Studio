#tag ClassProtected Class NativeImportObjInherits ManagerObj	#tag Method, Flags = &h21		Private Sub CreateAppendGroupImportObject(TheGroup as GroupObj, TheNode as XMLNode)		  //called by NoteMgr_MakeGroup		  //GroupImportObj are used to link objects to groups after all of the objects have been created		  		  dim GroupImportObject as GroupImportObj = new GroupImportObj		  		  GroupImportObject.Group = TheGroup		  GroupImportObject.XML_GroupNode = TheNode		  		  XML_GroupImportObjects.Append GroupImportObject		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetScrollX(TheValue as Integer)		  ParentWindow.xScrollBar.Value = TheValue		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetScrollXMaximum(TheValue as Integer)		  ParentWindow.xScrollBar.Maximum = TheValue		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetScrollY(TheValue as Integer)		  ParentWindow.yScrollBar.Value = TheValue		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetSnapToValue(TheValue as integer)		  		  Select Case TheValue		  Case MIDILib.kNoteLength_01		    ParentWindow.PM_SnapTo.Index = 0 '"Whole"		  Case MIDILib.kNoteLength_02		    ParentWindow.PM_SnapTo.Index = 1 '"1/2"		  Case MIDILib.kNoteLength_04		    ParentWindow.PM_SnapTo.Index = 2 '"1/4"		  Case MIDILib.kNoteLength_08		    ParentWindow.PM_SnapTo.Index = 3 '"1/8"		  Case MIDILib.kNoteLength_16		    ParentWindow.PM_SnapTo.Index = 4 '"1/16"		  Case MIDILib.kNoteLength_32		    ParentWindow.PM_SnapTo.Index = 5 '"1/32"		  Case MIDILib.kNoteLength_64		    ParentWindow.PM_SnapTo.Index = 6 '"1/64"		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetZoomX(TheValue as Integer)		  ParentWindow.SliderZoomX.Value = TheValue		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Editor_SetZoomY(TheValue as Integer)		  ParentWindow.SliderZoomY.Value = TheValue		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetChord(ChordID as String) As ChordObj		  dim thisChord as integer = 0		  dim firstChord as integer = 0		  dim lastChord as integer = Ubound(ParentWindow.NoteMgr.Chords)		  		  if lastChord > -1 then		    for thisChord = firstChord to lastChord		      dim theChord as ChordObj = ParentWindow.NoteMgr.Chords(thisChord)		      if theChord.ID = ChordID then		        Return theChord		      end if		    next		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetGroup(GroupID as String) As GroupObj		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as integer = Ubound(ParentWindow.NoteMgr.Groups)		  		  if lastGroup > -1 then		    for thisGroup = firstGroup to lastGroup		      dim theGroup as GroupObj = ParentWindow.NoteMgr.Groups(thisGroup)		      if theGroup.ID = GroupID then		        Return theGroup		      end if		    next		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetNote(NoteID as String) As NoteObj		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentWindow.NoteMgr.Notes)		  		  if lastNote > -1 then		    for thisNote = firstNote to lastNote		      dim theNote as NoteObj = ParentWindow.NoteMgr.Notes(thisNote)		      if theNote.ID = NoteID then		        Return theNote		      end if		    next		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub GetXML()		  dim TIS as TextInputStream = TheFile.OpenAsTextFile		  		  TheXML = New XmlDocument		  		  TheXML.LoadXml(TIS.ReadAll)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub GUIObj_SetSnapTo(TheNode as XMLNode)		  ParentWindow.GUIObj1.SnapTo = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		  		  Select Case ParentWindow.GUIObj1.SnapTo		  Case MIDILib.kNoteLength_01		    ParentWindow.PM_SnapTo.ListIndex = 0		  Case MIDILib.kNoteLength_02		    ParentWindow.PM_SnapTo.ListIndex = 1		  Case MIDILib.kNoteLength_04		    ParentWindow.PM_SnapTo.ListIndex = 2		  Case MIDILib.kNoteLength_08		    ParentWindow.PM_SnapTo.ListIndex = 3		  Case MIDILib.kNoteLength_16		    ParentWindow.PM_SnapTo.ListIndex = 4		  Case MIDILib.kNoteLength_32		    ParentWindow.PM_SnapTo.ListIndex = 5		  Case MIDILib.kNoteLength_64		    ParentWindow.PM_SnapTo.ListIndex = 6		  End Select		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddChordToGroup(Group as GroupObj, TheID as String)		  dim theChord as ChordObj = GetChord(TheID)		  		  if theChord <> nil then		    theChord.Group = Group		    Group.Objects.Append theChord		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddGroupToGroup(Group as GroupObj, TheID as String)		  dim theGroup as GroupObj = GetGroup(TheID)		  		  if theGroup <> nil then		    theGroup.Group = Group		    Group.Objects.Append theGroup		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddNotesToChord(TheChord as ChordObj, TheNode as XMLNode)		  //called by NoteMgr_MakeChord		  		  dim objectID as string		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim NoteID as string = XML_GetTagContent(mNode)		    		    dim theNote as NoteObj = GetNote(NoteID)		    		    if theNote <> nil then		      TheChord.Notes.Append theNote		    end if		    		    		    		  next		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddNoteToGroup(Group as GroupObj, TheID as String)		  dim theNote as NoteObj = GetNote(TheID)		  		  if theNote <> nil then		    theNote.Group = Group		    Group.Objects.Append theNote		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddObjectsToGroup(Group as GroupObj, TheNode as XMLNode)		  //called by NoteMgr_MakeGroup		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim objectType as string		    dim objectID as string		    		    dim thisObjectNode as integer = 0		    dim firstObjectNode as integer = 0		    dim lastObjectNode as integer = mNode.ChildCount - 1		    		    for thisObjectNode = firstObjectNode to lastObjectNode		      dim theObjectNode as XmlNode = mNode.Child(thisObjectNode)		      		      select case theObjectNode.Name		        		      case FileLib.kXML_Object_Type		        objectType = XML_GetTagContent(theObjectNode)		        		      case FileLib.kXML_Object_ID		        objectID = XML_GetTagContent(theObjectNode)		        		      end select		    next		    		    select case objectType		      		    case FileLib.kXML_ObjectType_Note		      NoteMgr_AddNoteToGroup(Group, objectID)		      		    case FileLib.kXML_ObjectType_Chord		      NoteMgr_AddChordToGroup(Group, objectID)		      		    case FileLib.kXML_ObjectType_Group		      NoteMgr_AddGroupToGroup(Group, objectID)		      		    end select		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NoteMgr_AddObjectsToGroups()		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as Integer = Ubound(XML_GroupImportObjects)		  		  if lastGroup > -1 then		    for thisGroup = firstGroup to lastGroup		      		      if XML_GroupImportObjects(thisGroup) <> nil then		        		        dim theGroupImport as GroupImportObj = XML_GroupImportObjects(thisGroup)		        dim theGroup as GroupObj = theGroupImport.Group		        dim theGroupNode as XmlNode = theGroupImport.XML_GroupNode		        		        NoteMgr_AddObjectsToGroup(theGroup, theGroupNode)		        		      end if		      		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_AddRootToChord(TheChord as ChordObj, NoteID as String)		  dim theNote as NoteObj = GetNote(NoteID)		  		  if theNote <> nil then		    TheChord.Root = theNote		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NoteMgr_GetChords(TheNode as XMLNode)		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim theChord as ChordObj = NoteMgr_MakeChord(mNode)		    		    if XML_ChordNotesNode <> nil then		      NoteMgr_AddNotesToChord(theChord, XML_ChordNotesNode)		      XML_ChordNotesNode = nil		    end if		    		    ParentWindow.NoteMgr.Chords.Append theChord		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NoteMgr_GetGroups(TheNode as XMLNode)		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim theGroup as GroupObj = NoteMgr_MakeGroup(mNode)		    		    ParentWindow.NoteMgr.Groups.Append theGroup		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NoteMgr_GetNotes(TheNode as XMLNode)		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim theNote as NoteObj = NoteMgr_MakeNote(mNode)		    		    NoteMgr_SetObjectProperties(theNote, mNode)		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function NoteMgr_MakeChord(TheNode as XMLNode) As ChordObj		  //called by NoteMgr_GetChords		  		  dim theChord as ChordObj = new ChordObj		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		      'theChord.ApplyRootSettingsToChord //method		      'theChord.DeselectObj //method		      'theChord.Group //object		      		    case FileLib.kXML_MusicObj_Hidden		      theChord.Hidden = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_ID		      theChord.ID = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Label		      theChord.Label = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Length		      theChord.Length = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Locked		      theChord.Locked = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Name		      theChord.Name = XML_GetTagContent(mNode)		      		    case FileLib.kXML_ChordObj_Notes		      //save this node for safekeeping later		      XML_ChordNotesNode = mNode		      		    case FileLib.kXML_MusicObj_OldLength		      theChord.OldLength = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_OldStartBeat		      theChord.OldStartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		      'theChord.RemoveNote //method		      		    case FileLib.kXML_ChordObj_Root		      dim theNoteID as string = XML_GetTagContent(mNode)		      NoteMgr_AddRootToChord(theChord, theNoteID)		      'theChord.Root //object		      		    case FileLib.kXML_ChordObj_RootIndex		      //this is managed when the chord calculates the chord, but we save it anyway		      theChord.RootIndex = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Selected		      theChord.Selected = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		      'theChord.SelectObj //method		      		    case FileLib.kXML_ChordObj_Settings		      theChord.Settings = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_StartBeat		      theChord.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_ChordObj_StepValues		      //this is an array that needs to be managed elsewhere		      		      'theChord.Track //object		      		    case FileLib.kXML_ChordObj_Type		      theChord.Type = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Velocity		      theChord.Velocity = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    end select		    		  next		  		  return theChord		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function NoteMgr_MakeGroup(TheNode as XMLNode) As GroupObj		  //called by NoteMgr_GetGroups		  		  dim theGroup as GroupObj = new GroupObj		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		      'theGroup.Constructor //method		      'theGroup.DeselectObj //method		      'theGroup.GetBounds //method		      'theGroup.Group //object		      		    case FileLib.kXML_MusicObj_Hidden		      theGroup.Hidden = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_ID		      theGroup.ID = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Label		      theGroup.Label = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Length		      theGroup.Length = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Locked		      theGroup.Locked = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Name		      theGroup.Name = XML_GetTagContent(mNode)		      		    case FileLib.kXML_GroupObj_Objects_Node		      //save this group and node for safekeeping later		      CreateAppendGroupImportObject(theGroup, mNode)		      		    case FileLib.kXML_MusicObj_OldLength		      theGroup.OldLength = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_OldStartBeat		      theGroup.OldStartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		      'theGroup.RemoveObject //method		      		    case FileLib.kXML_MusicObj_Selected		      theGroup.Selected = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		      'theGroup.SelectObj //method		      		    case FileLib.kXML_MusicObj_StartBeat		      theGroup.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		      'theGroup.Track //object		      'theGroup.UnGroupObj //method		      		    case FileLib.kXML_MusicObj_Velocity		      theGroup.Velocity = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    end select		  next		  		  return theGroup		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function NoteMgr_MakeNote(TheNode as XMLNode) As NoteObj		  dim theNoteBeat as Integer		  dim theNotePitch as Integer		  dim theNoteLength as Integer		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		    case FileLib.kXML_MusicObj_StartBeat		      theNoteBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_NoteObj_Pitch		      theNotePitch = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Length		      theNoteLength = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    end select		    		  next		  		  dim theNote as NoteObj = ParentWindow.NoteMgr.CreateNote(theNoteBeat, theNotePitch, theNoteLength)		  		  return theNote		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_SetNewNoteValue(TheValue as integer)		  Select Case TheValue		  Case MIDILib.kNoteLength_01		    ParentWindow.PM_NewNoteLength.ListIndex = 0 '"Whole"		  Case MIDILib.kNoteLength_02		    ParentWindow.PM_NewNoteLength.ListIndex = 1 '"1/2"		  Case MIDILib.kNoteLength_04		    ParentWindow.PM_NewNoteLength.ListIndex = 2 '"1/4"		  Case MIDILib.kNoteLength_08		    ParentWindow.PM_NewNoteLength.ListIndex = 3 '"1/8"		  Case MIDILib.kNoteLength_16		    ParentWindow.PM_NewNoteLength.ListIndex = 4 '"1/16"		  Case MIDILib.kNoteLength_32		    ParentWindow.PM_NewNoteLength.ListIndex = 5 '"1/32"		  Case MIDILib.kNoteLength_64		    ParentWindow.PM_NewNoteLength.ListIndex = 6 '"1/64"		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_SetObjectProperties(TheNote as NoteObj, TheNode as XMLNode)		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		      'case FileLib.kXML_MusicObj_Group //object linking handled after all objects have been made		      		    case FileLib.kXML_MusicObj_Hidden		      TheNote.Hidden = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_ID		      TheNote.ID = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Label		      TheNote.Label = XML_GetTagContent(mNode)		      		      'case FileLib.kXML_MusicObj_Length //already set for NoteMgr.CreateNote		      		    case FileLib.kXML_MusicObj_Locked		      TheNote.Locked = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Name		      TheNote.Name = XML_GetTagContent(mNode)		      		      'case FileLib.kXML_MusicObj_OldLength //dynamically handled in GUIObj1		      'case FileLib.kXML_MusicObj_OldStartBeat //dynamically handled in GUIObj1		      'case FileLib.kXML_MusicObj_Selected //objects don't get selected when the file is simply opened		      'case FileLib.kXML_MusicObj_StartBeat //already set for NoteMgr.CreateNote		      'case FileLib.kXML_MusicObj_Track //object linking handled after all objects have been made		      		    case FileLib.kXML_MusicObj_Velocity		      TheNote.Velocity = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		      'case FileLib.kXML_NoteObj_Chord //object linking handled after all objects have been made		      'case FileLib.kXML_NoteObj_NextNote //object linking handled after all objects have been made		      'case FileLib.kXML_NoteObj_OldPitch //dynamically handled in GUIObj1		      'case FileLib.kXML_NoteObj_Pitch //already set for NoteMgr.CreateNote		      'case FileLib.kXML_NoteObj_PreviousNote //object linking handled after all objects have been made		      		    end select		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NoteMgr_SetObjectProperties(TheTrack as TrackObj, TheNode as XMLNode)		  //called by TrackMgr_GetTracks		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		      //all other TheTrack items are either methods or object-related properties handled later		      		      		    case FileLib.kXML_Track_ID		      TheTrack.ID = XML_GetTagContent(mNode)		      		    case FileLib.kXML_Track_Instrument		      TheTrack.Instrument = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_Track_Label		      TheTrack.Label = XML_GetTagContent(mNode)		      		    case FileLib.kXML_Track_Name		      TheTrack.Name = XML_GetTagContent(mNode)		      		    case FileLib.kXML_Track_Play		      TheTrack.Play = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_Track_Visible		      TheTrack.Visible = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_Track_VisualCue		      		      dim theColorNode as XMLNode = mNode.Child(0)		      TheTrack.VisualCue = XML_ConvertValueToColor(theColorNode)		      		    case FileLib.kXML_Track_Objects_Node		      TrackMgr_AddObjectsToTrack(TheTrack, mNode)		      		    end select		  next		  		  '<track_mgr>		  '   <colorindex>1</colorindex>		  '   <tracks>                                                 		  '      <track_obj>                                           <<---<< Argument TheNode		  '         <track_objects>                                    <<---<<		  '            <generic_object>		  '               <generic_objecttype>N</generic_objecttype>		  '               <generic_objectid>0</generic_objectid>		  '            </generic_object>		  '         </track_objects>		  '         <track_instrument>1</track_instrument>             <<---<<		  '         <track_label></track_label>                        <<---<<		  '         <track_Name>Track 1</track_Name>                   <<---<<		  '         <track_play>T</track_play>                         <<---<<		  '         <track_visible>T</track_visible>                   <<---<<		  '         <track_visualcue>                                  <<---<<		  '            <color>		  '               <color_red>33</color_red>		  '               <color_green>33</color_green>		  '               <color_blue>99</color_blue>		  '           </color>		  '         </track_visualcue>		  '      </track_obj>		  '   </tracks>		  '</track_mgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Open()		  //And away we go...		  		  GetXML		  		  if TheXML <> nil then		    XML_ParseXML		    		  else		    MsgBox "There was a problem reading the file " + TheFile.Name		  end if		  		  RefreshParentWindow		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetEditCursorStart(TheNode as XMLNode)		  ParentWindow.PlayMgr.EditCursor.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetLoopPlay(TheNode as XMLNode)		  ParentWindow.PlayMgr.LoopPlay = XML_ConvertValueToBoolean(XML_GetTagContent(TheNode))		  		  select case ParentWindow.PlayMgr.LoopPlay		  case true		    ParentWindow.Loop_Check.Value = true		  case false		    ParentWindow.Loop_Check.Value = false		  end select		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetLoopStartCursorStart(TheNode as XMLNode)		  ParentWindow.PlayMgr.LoopStartCursor.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetLoopStopCursorStart(TheNode as XMLNode)		  ParentWindow.PlayMgr.LoopStopCursor.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetStartCursorStart(TheNode as XMLNode)		  ParentWindow.PlayMgr.StartCursor.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PlayMgr_SetStopCursorStart(TheNode as XMLNode)		  ParentWindow.PlayMgr.StopCursor.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(TheNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetBasicBeat(TheNode as XMLNode)		  ParentWindow.SongMgr.TimeSignatureBasicBeat = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		  		  Select case ParentWindow.SongMgr.TimeSignatureBasicBeat		  Case MIDILib.kNoteLength_02		    ParentWindow.PM_BasicBeat.ListIndex = 0		  Case MIDILib.kNoteLength_04		    ParentWindow.PM_BasicBeat.ListIndex = 1		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetBeatsPerMeasure(TheNode as XMLNode)		  ParentWindow.SongMgr.TimeSignatureBeatsPerMeasure = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		  		  Select Case ParentWindow.SongMgr.TimeSignatureBeatsPerMeasure		  Case 2 '0		    ParentWindow.PM_BeatsPerMeasure.ListIndex = 0		  Case 3 '1		    ParentWindow.PM_BeatsPerMeasure.ListIndex = 1		  Case 4 '2		    ParentWindow.PM_BeatsPerMeasure.ListIndex = 2		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetKeyPitchBuffer(TheKey as KeyObj, TheNode as XMLNode)		  //called by SongMgr_MakeKey		  		  dim thisNode as Integer = 0		  dim firstNode as Integer = 0		  dim lastNode as Integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XMLnode = TheNode.Child(thisNode)		    dim thePitch as Integer = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		    TheKey.PitchesBuffer.Append thePitch		  next		  		  '  <songmgr>		  '    <keys>		  '      <key_obj>		  '        <key_constant>Major=2 2 1 2 2 2 1</key_constant>		  '        <key_modifier>0</key_modifier>		  '        <key_pitches>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitches>		  '        <key_pitchesbuffer>                                      //TheNode		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitchesbuffer>		  '        <key_settings>0</key_settings>		  '        <key_startbeat>0</key_startbeat>		  '        <key_stepvalues>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>1</key_stepvalue>		  '          <key_stepvalue>...</key_stepvalue>		  '        </key_stepvalues>		  '        <key_tonic>0</key_tonic>		  '        <key_tonicname>C</key_tonicname>		  '      </key_obj>		  '    </keys>		  '  </songmgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetKeyPitches(TheKey as KeyObj, TheNode as XMLNode)		  //called by SongMgr_MakeKey		  		  dim thisNode as Integer = 0		  dim firstNode as Integer = 0		  dim lastNode as Integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XMLnode = TheNode.Child(thisNode)		    dim thePitch as Integer = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		    TheKey.Pitches.Append thePitch		  next		  		  '  <songmgr>		  '    <keys>		  '      <key_obj>		  '        <key_constant>Major=2 2 1 2 2 2 1</key_constant>		  '        <key_modifier>0</key_modifier>		  '        <key_pitches>                                      //TheNode		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitches>		  '        <key_pitchesbuffer>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitchesbuffer>		  '        <key_settings>0</key_settings>		  '        <key_startbeat>0</key_startbeat>		  '        <key_stepvalues>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>1</key_stepvalue>		  '          <key_stepvalue>...</key_stepvalue>		  '        </key_stepvalues>		  '        <key_tonic>0</key_tonic>		  '        <key_tonicname>C</key_tonicname>		  '      </key_obj>		  '    </keys>		  '  </songmgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetKeys(TheNode as XMLNode)		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		    case FileLib.kXML_KeyObj_Node		      		      dim theKey as KeyObj = SongMgr_MakeKey(mNode)		      ParentWindow.SongMgr.Keys(0) = TheKey		      theKey.CalculatePitches		      		    end select		    		  next		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetKeyStepValues(TheKey as KeyObj, TheNode as XMLNode)		  //called by SongMgr_MakeKey		  		  dim thisNode as Integer = 0		  dim firstNode as Integer = 0		  dim lastNode as Integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XMLnode = TheNode.Child(thisNode)		    dim theStepValue as String = XML_GetTagContent(mNode)		    TheKey.StepValuesString.Append theStepValue		  next		  		  '  <songmgr>		  '    <keys>		  '      <key_obj>		  '        <key_constant>Major=2 2 1 2 2 2 1</key_constant>		  '        <key_modifier>0</key_modifier>		  '        <key_pitches>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitches>		  '        <key_pitchesbuffer>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitchesbuffer>		  '        <key_settings>0</key_settings>		  '        <key_startbeat>0</key_startbeat>		  '        <key_stepvalues>                                      //TheNode		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>1</key_stepvalue>		  '          <key_stepvalue>...</key_stepvalue>		  '        </key_stepvalues>		  '        <key_tonic>0</key_tonic>		  '        <key_tonicname>C</key_tonicname>		  '      </key_obj>		  '    </keys>		  '  </songmgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetTempo(TheNode as XMLNode)		  ParentWindow.SongMgr.Tempo = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		  ParentWindow.Tempo_EF.Text = Str(ParentWindow.SongMgr.Tempo)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SongMgr_GetTotalBeats(theNode as XMLNode)		  ParentWindow.SongMgr.TotalBeats = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function SongMgr_MakeKey(TheNode as XMLNode) As KeyObj		  dim theKey as KeyObj = new KeyObj		  		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		      		      'theKey.CalculatePitches //method		      'theKey.Constructor //method		      'theKey.Group //object; inapplicable		      		    case FileLib.kXML_MusicObj_Hidden		      theKey.Hidden = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_ID		      theKey.ID = XML_GetTagContent(mNode)		      		    case FileLib.kXML_KeyObj_Constant		      theKey.Key = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Label		      theKey.Label = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_Length		      theKey.Length = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Locked		      theKey.Locked = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_KeyObj_Modifer		      theKey.Modifier = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_Name		      theKey.Name = XML_GetTagContent(mNode)		      		    case FileLib.kXML_MusicObj_OldLength		      theKey.OldLength = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_MusicObj_OldStartBeat		      theKey.OldStartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_KeyObj_Pitches_Node		      SongMgr_GetKeyPitches(theKey, mNode)		      		    case FileLib.kXML_KeyObj_PitchesBuffer_Node		      SongMgr_GetKeyPitchBuffer(theKey, TheNode)		      		    case FileLib.kXML_MusicObj_Selected		      theKey.Selected = XML_ConvertValueToBoolean(XML_GetTagContent(mNode))		      		    case FileLib.kXML_KeyObj_Settings		      theKey.Settings = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		      'theKey.Song //object		      		    case FileLib.kXML_MusicObj_StartBeat		      theKey.StartBeat = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_KeyObj_StepValueString_Node		      SongMgr_GetKeyStepValues(theKey, mNode)		      		    case FileLib.kXML_KeyObj_Tonic		      theKey.Tonic = XML_ConvertValueToInteger(XML_GetTagContent(mNode))		      		    case FileLib.kXML_KeyObj_TonicName		      theKey.TonicName = XML_GetTagContent(mNode)		      		      'theKey.Track //object; inapplicable		      'theKey.Velocity //inapplicable		      		    end select		    		  next		  		  return theKey		  		  '  <songmgr>		  '    <keys>		  '      <key_obj>		  '        <key_constant>Major=2 2 1 2 2 2 1</key_constant>		  '        <key_modifier>0</key_modifier>		  '        <key_pitches>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitches>		  '        <key_pitchesbuffer>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitchesbuffer>		  '        <key_settings>0</key_settings>		  '        <key_startbeat>0</key_startbeat>		  '        <key_stepvalues>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>1</key_stepvalue>		  '          <key_stepvalue>...</key_stepvalue>		  '        </key_stepvalues>		  '        <key_tonic>0</key_tonic>		  '        <key_tonicname>C</key_tonicname>		  '      </key_obj>		  '    </keys>		  '  </songmgr>		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub TrackMgr_AddObjectsToTrack(TheTrack as TrackObj, TheNode as XMLNode)		  //called by NoteMgr_SetObjectProperties		  		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    dim objectType as string		    dim objectID as string		    		    dim thisObjectNode as integer = 0		    dim firstObjectNode as integer = 0		    dim lastObjectNode as integer = mNode.ChildCount - 1		    		    for thisObjectNode = firstObjectNode to lastObjectNode		      dim theObjectNode as XmlNode = mNode.Child(thisObjectNode)		      		      select case theObjectNode.Name		        		      case FileLib.kXML_Object_Type		        objectType = XML_GetTagContent(theObjectNode)		        		      case FileLib.kXML_Object_ID		        objectID = XML_GetTagContent(theObjectNode)		        		      end select		    next		    		    select case objectType		      		    case FileLib.kXML_ObjectType_Note		      TrackMgr_LinkTrackToNote(TheTrack, objectID)		      		    case FileLib.kXML_ObjectType_Chord		      TrackMgr_LinkTrackToChord(TheTrack, objectID)		      		    case FileLib.kXML_ObjectType_Group		      TrackMgr_LinkTrackToGroup(TheTrack, objectID)		      		    end select		    		  next		  		  '<track_mgr>		  '   <colorindex>1</colorindex>		  '   <tracks>		  '      <track_obj>                                           		  '         <track_objects>                                    <<---<< Argument TheNode		  '            <generic_object>                                <<---<< thisNode		  '               <generic_objecttype>N</generic_objecttype>   <<---<<		  '               <generic_objectid>0</generic_objectid>       <<---<<		  '            </generic_object>		  '         </track_objects>		  '         <track_instrument>1</track_instrument>		  '         <track_label></track_label>		  '         <track_Name>Track 1</track_Name>		  '         <track_play>T</track_play>		  '         <track_visible>T</track_visible>		  '         <track_visualcue>		  '            <color>		  '               <color_red>33</color_red>		  '               <color_green>33</color_green>		  '               <color_blue>99</color_blue>		  '           </color>		  '         </track_visualcue>		  '      </track_obj>		  '   </tracks>		  '</track_mgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TrackMgr_GetTracks(TheNode as XMLNode)		  dim thisNode as integer = 0		  dim firstNode as integer = 0		  dim lastNode as integer = TheNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim mNode as XmlNode = TheNode.Child(thisNode)		    		    select case mNode.Name		    case FileLib.kXML_Track_Node		      dim theTrack as TrackObj		      if thisNode = 0 then		        ParentWindow.TrackListObj1.Selected(0) = true		        theTrack = ParentWindow.TrackListObj1.CurrentTrack		        NoteMgr_SetObjectProperties(theTrack, mNode)		      else		        ParentWindow.TrackListObj1.AddTrack		        theTrack = ParentWindow.TrackListObj1.CurrentTrack		        NoteMgr_SetObjectProperties(theTrack, mNode)		      end if		    end select		  next		  		  '<track_mgr>		  '   <colorindex>1</colorindex> 		  '   <tracks>                                                 <<---<< Argument TheNode		  '      <track_obj>                                           <<---<<		  '         <track_objects>		  '            <generic_object>		  '               <generic_objecttype>N</generic_objecttype>		  '               <generic_objectid>0</generic_objectid>		  '            </generic_object>		  '         </track_objects>		  '         <track_instrument>1</track_instrument>             		  '         <track_label></track_label>                        		  '         <track_Name>Track 1</track_Name>                   		  '         <track_play>T</track_play>                         		  '         <track_visible>T</track_visible>                   		  '         <track_visualcue>                                  		  '            <color>		  '               <color_red>33</color_red>		  '               <color_green>33</color_green>		  '               <color_blue>99</color_blue>		  '           </color>		  '         </track_visualcue>		  '      </track_obj>		  '   </tracks>		  '</track_mgr>		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub TrackMgr_LinkTrackToChord(Track As TrackObj, ChordID as String)		  dim thisChord as integer = 0		  dim firstChord as integer = 0		  dim lastChord as integer = Ubound(ParentWindow.NoteMgr.Chords)		  		  for thisChord = firstChord to lastChord		    dim theChord as ChordObj = ParentWindow.NoteMgr.Chords(thisChord)		    if theChord.ID = ChordID then		      Track.AddObject(theChord)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub TrackMgr_LinkTrackToGroup(Track As TrackObj, GroupID as String)		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as integer = Ubound(ParentWindow.NoteMgr.Groups)		  		  for thisGroup = firstGroup to lastGroup		    dim theGroup as GroupObj = ParentWindow.NoteMgr.Groups(thisGroup)		    if theGroup.ID = GroupID then		      Track.AddObject(theGroup)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub TrackMgr_LinkTrackToNote(Track As TrackObj, NoteID as String)		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentWindow.NoteMgr.Notes)		  		  for thisNote = firstNote to lastNote		    dim theNote as NoteObj = ParentWindow.NoteMgr.Notes(thisNote)		    if theNote.ID = NoteID then		      Track.AddObject(theNote)		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_ConvertValueToBoolean(TheValue as String) As Boolean		  If TheValue = FileLib.kXML_Datatype_Boolean_True then return True		  If TheValue = FileLib.kXML_Datatype_Boolean_False then return False		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_ConvertValueToColor(TheColorNode as XMLNode) As Color		  dim mColorR as Integer = &h00		  dim mColorG as Integer = &h00		  dim mColorB as Integer = &h00		  		  dim thisNode as Integer = 0		  dim firstNode as Integer = 0		  dim lastNode as Integer = TheColorNode.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XMLNode = TheColorNode.Child(thisNode)		    		    select case theNode.Name		    case FileLib.kXML_DataType_Color_Red		      mColorR = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		      		    case FileLib.kXML_DataType_Color_Green		      mColorG = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		      		    case FileLib.kXML_DataType_Color_Blue		      mColorB = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		      		    end select		    		  next		  		  return RGB(mColorR, mColorG, mColorB)		  		  '           <color>		  '               <color_red>33</color_red>		  '               <color_green>33</color_green>		  '               <color_blue>99</color_blue>		  '           </color>		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_ConvertValueToInteger(TheValue as String) As Integer		  return Val(TheValue)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetEditor()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_Editor.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_Editor.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_Editor_SnapToValue '<editor_snaptovalue>18</editor_snaptovalue>		      Editor_SetSnapToValue(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    case FileLib.kXML_Editor_Zoom_X '<editor_zoomx>2</editor_zoomx>		      Editor_SetZoomX(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    case FileLib.kXML_Editor_Zoom_Y '<editor_zoomy>10</editor_zoomy>		      Editor_SetZoomY(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    case FileLib.kXML_Editor_Scroll_X '<editor_scrollx>0</editor_scrollx>		      Editor_SetScrollX(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    case FileLib.kXML_Editor_ScrollX_Maximum		      Editor_SetScrollXMaximum(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    case FileLib.kXML_Editor_Scroll_Y '<editor_scrolly>37</editor_scrolly>		      Editor_SetScrollY(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		    end select		    		    ParentWindow.Refresh		    		  next		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetGUIObj()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_GUIObj.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_GUIObj.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_GUIObj_SnapTo		      GUIObj_SetSnapTo(theNode)		      		    end select		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_GetHeader() As Boolean		  //this is here as a check to be sure that the file is the same version as the app.		  		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetNodes()		  dim thisNestedNode as integer = 0		  dim firstNestedNode as integer = 0		  dim lastNestedNode as integer = XML_Root.ChildCount - 1		  		  for thisNestedNode = firstNestedNode to lastNestedNode		    		    dim theNestedNode as XMLNode = XML_Root.Child(thisNestedNode)		    select case theNestedNode.Name		      		    case FileLib.kXML_Editor_Node		      XML_Editor = theNestedNode		      		    case FileLib.kXML_NoteMgr_Node		      XML_NoteMgr = theNestedNode		      		    case FileLib.kXML_SongMgr_Node		      XML_SongMgr = theNestedNode		      		    case FileLib.kXML_TrackMgr_Node		      XML_TrackMgr = theNestedNode		      		    case FileLib.kXML_GUIObj_Node		      XML_GUIObj = theNestedNode		      		    case FileLib.kXML_PlayMgr_Node		      XML_PlayMgr = theNestedNode		      		    end select		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetNoteMgr()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_NoteMgr.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_NoteMgr.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_NoteMgr_Notes_Node		      NoteMgr_GetNotes(theNode)		      		    case FileLib.kXML_NoteMgr_Chords_Node		      NoteMgr_GetChords(theNode)		      		    case FileLib.kXML_NoteMgr_Groups_Node		      NoteMgr_GetGroups(theNode)		      		    case FileLib.kXML_NoteMgr_NewNoteLength		      NoteMgr_SetNewNoteValue(XML_ConvertValueToInteger(XML_GetTagContent(theNode)))		      		    end select		    		  next		  		  NoteMgr_AddObjectsToGroups		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetPlayMgr()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_PlayMgr.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_PlayMgr.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_PlayMgr_Loop		      PlayMgr_SetLoopPlay(theNode)		      		    case FileLib.kXML_PlayMgr_EditCursorStart		      PlayMgr_SetEditCursorStart(theNode)		      		    case FileLib.kXML_PlayMgr_LoopStartCursorStart		      PlayMgr_SetLoopStartCursorStart(theNode)		      		    case FileLib.kXML_PlayMgr_LoopStopCursorStart		      PlayMgr_SetLoopStopCursorStart(theNode)		      		    case FileLib.kXML_PlayMgr_StartCursorStart		      PlayMgr_SetStartCursorStart(theNode)		      		    case FileLib.kXML_PlayMgr_StopCursorStart		      PlayMgr_SetStopCursorStart(theNode)		      		    end select		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetSongMgr()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_SongMgr.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_SongMgr.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_Keys_Node		      SongMgr_GetKeys(theNode)		      		    case FileLib.kXML_SongMgr_Tempo		      SongMgr_GetTempo(theNode)		      		    case FileLib.kXML_SongMgr_TimeSignatureBasicBeat		      SongMgr_GetBasicBeat(theNode)		      		    case FileLib.kXML_SongMgr_TimeSignatureBeatsPerMeasure		      SongMgr_GetBeatsPerMeasure(theNode)		      		    case FileLib.kXML_SongMgr_TotalBeats		      SongMgr_GetTotalBeats(theNode)		      		    end select		    		  next		  		  '  <songmgr>		  '    <keys>		  '      <key_obj>		  '        <key_constant>Major=2 2 1 2 2 2 1</key_constant>		  '        <key_modifier>0</key_modifier>		  '        <key_pitches>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitches>		  '        <key_pitchesbuffer>		  '          <key_pitch>0</key_pitch>		  '          <key_pitch>2</key_pitch>		  '          <key_pitch>4</key_pitch>		  '          <key_pitch>...</key_pitch>		  '        </key_pitchesbuffer>		  '        <key_settings>0</key_settings>		  '        <key_startbeat>0</key_startbeat>		  '        <key_stepvalues>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>2</key_stepvalue>		  '          <key_stepvalue>1</key_stepvalue>		  '          <key_stepvalue>...</key_stepvalue>		  '        </key_stepvalues>		  '        <key_tonic>0</key_tonic>		  '        <key_tonicname>C</key_tonicname>		  '      </key_obj>		  '    </keys>		  '  </songmgr>		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_GetTagContent(TheTag as XMLNode) As String		  if TheTag.Child(0) <> nil then		    return TheTag.Child(0).Value		  end if		  		  return ""		  		  'dim thisNode as Integer = 0		  'dim firstNode as integer = 0		  'dim lastNode as Integer = TheTag.ChildCount - 1		  '		  'for thisNode = firstNode to lastNode		  'if TheTag.Child(thisNode) IsA XmlTextNode then		  '		  'dim theTextNode as XmlTextNode		  'theTextNode = TheTag.Child(thisNode)		  'return theTextNode.Value		  '		  'end if		  'next		  '		  'return "0"		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_GetTrackMgr()		  dim thisNode as Integer = 0		  dim firstNode as Integer  = 0		  dim lastNode as Integer = XML_TrackMgr.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    		    dim theNode as XmlNode = XML_TrackMgr.Child(thisNode)		    		    select case theNode.Name		      		    case FileLib.kXML_Tracks_Node		      TrackMgr_GetTracks(theNode)		      		    case FileLib.kXML_TrackMgr_ColorIndex		      ParentWindow.TrackListObj1.ColorIndex = XML_ConvertValueToInteger(XML_GetTagContent(theNode))		      		      'case FileLib.kXML_TrackMgr_CurrentTrack		      		    end select		    		  next		  		  '<track_mgr>		  '   <colorindex>1</colorindex> <<---<<		  '   <tracks>                   <<---<< TrackMgr_GetTracks(theNode)		  '      <track_obj>		  '         <track_objects>		  '            <generic_object>		  '               <generic_objecttype>N</generic_objecttype>		  '               <generic_objectid>0</generic_objectid>		  '            </generic_object>		  '         </track_objects>		  '         <track_instrument>1</track_instrument>		  '         <track_label></track_label>		  '         <track_Name>Track 1</track_Name>		  '         <track_play>T</track_play>		  '         <track_visible>T</track_visible>		  '         <track_visualcue>		  '            <color>		  '               <color_red>33</color_red>		  '               <color_green>33</color_green>		  '               <color_blue>99</color_blue>		  '           </color>		  '         </track_visualcue>		  '      </track_obj>		  '   </tracks>		  '</track_mgr>		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub XML_ParseXML()		  dim thisNode as Integer = 0		  dim firstNode as integer = 0		  dim lastNode as Integer = TheXML.ChildCount - 1		  		  for thisNode = firstNode to lastNode		    dim theNode as XmlNode = TheXML.Child(thisNode)		    if theNode.Name = FileLib.kXML_Root_Node then		      XML_Root = theNode		    end if		  next		  		  if XML_Root <> nil then		    		    if XML_GetHeader then //the file is OK to open in this version		      		      XML_GetNodes		      		      //Now we're ready to start populating the Editor.		      if XML_Editor <> nil then XML_GetEditor		      if XML_SongMgr <> nil then XML_GetSongMgr		      if XML_NoteMgr <> nil then XML_GetNoteMgr		      if XML_TrackMgr <> nil then XML_GetTrackMgr		      if XML_GUIObj <> Nil then XML_GetGUIObj		      if XML_PlayMgr <> nil then XML_GetPlayMgr		      		    else		      MsgBox "The file " + TheFile.Name + " was created with a different version of " + App.kAppName + " and can't be opened."		    end if		    		  else		    MsgBox "The file " + TheFile.Name + " does not contain the root object and can't be opened."		  end if		End Sub	#tag EndMethod	#tag Note, Name = BrainStorm		In all MakeObject methods, we really need to go through the current methods to make everything.		To do this manually reauires that the Track Object's YNotePlayer be made and that's just oo far out 		of the scope of the Import object. We would then just get the last object made in an array and set 		all of the properties				for the add track portion, check the number of tracks already available. Use the first native track		and then add if necessary.	#tag EndNote	#tag Note, Name = Bugs				{E} Scrolling doesn't exactly go back to where it is supposed to. It seems to be coming up short.				{E} Group Object management needs to be handled at a different time than in the chords because it relies on other Groups		   [ ] Done				{E} The track data shows up in the TrackListObj, but reverts to default when clicked on and the 		NoteObjs are showing the defaults as well.		   [ ] TrackListObj.Update needed to be run as well as other lame errors (values being read incorrectly and the like)	#tag EndNote	#tag Note, Name = File DOM 1				<?xml version="1.0" encoding="UTF-8"?>		<data_root xmlns:xml="http://www.w3.org/XML/1998/namespace">		<application>		<application_name>MusicSketch (Abra)</application_name>		<application_version>0.5</application_version>		</application>		<songmgr>		<keys>		<key_obj>		<key_obj>Major=2 2 1 2 2 2 1</key_obj>		<key_modifier>0</key_modifier>		<key_pitches>		<key_pitch>0</key_pitch>		<key_pitch>2</key_pitch>		<key_pitch>4</key_pitch>		<key_pitch>5</key_pitch>		<key_pitch>7</key_pitch>		<key_pitch>9</key_pitch>		<key_pitch>B</key_pitch>		<key_pitch>C</key_pitch>		<key_pitch>E</key_pitch>		<key_pitch>10</key_pitch>		<key_pitch>11</key_pitch>		<key_pitch>13</key_pitch>		<key_pitch>15</key_pitch>		<key_pitch>17</key_pitch>		<key_pitch>18</key_pitch>		<key_pitch>1A</key_pitch>		<key_pitch>1C</key_pitch>		<key_pitch>1D</key_pitch>		<key_pitch>1F</key_pitch>		<key_pitch>21</key_pitch>		<key_pitch>23</key_pitch>		<key_pitch>24</key_pitch>		<key_pitch>26</key_pitch>		<key_pitch>28</key_pitch>		<key_pitch>29</key_pitch>		<key_pitch>2B</key_pitch>		<key_pitch>2D</key_pitch>		<key_pitch>2F</key_pitch>		<key_pitch>30</key_pitch>		<key_pitch>32</key_pitch>		<key_pitch>34</key_pitch>		<key_pitch>35</key_pitch>		<key_pitch>37</key_pitch>		<key_pitch>39</key_pitch>		<key_pitch>3B</key_pitch>		<key_pitch>3C</key_pitch>		<key_pitch>3E</key_pitch>		<key_pitch>40</key_pitch>		<key_pitch>41</key_pitch>		<key_pitch>43</key_pitch>		<key_pitch>45</key_pitch>		<key_pitch>47</key_pitch>		<key_pitch>48</key_pitch>		<key_pitch>4A</key_pitch>		<key_pitch>4C</key_pitch>		<key_pitch>4D</key_pitch>		<key_pitch>4F</key_pitch>		<key_pitch>51</key_pitch>		<key_pitch>53</key_pitch>		<key_pitch>54</key_pitch>		<key_pitch>56</key_pitch>		<key_pitch>58</key_pitch>		<key_pitch>59</key_pitch>		<key_pitch>5B</key_pitch>		<key_pitch>5D</key_pitch>		<key_pitch>5F</key_pitch>		<key_pitch>60</key_pitch>		<key_pitch>62</key_pitch>		<key_pitch>64</key_pitch>		<key_pitch>65</key_pitch>		<key_pitch>67</key_pitch>		<key_pitch>69</key_pitch>		<key_pitch>6B</key_pitch>		<key_pitch>6C</key_pitch>		<key_pitch>6E</key_pitch>		<key_pitch>70</key_pitch>		<key_pitch>71</key_pitch>		<key_pitch>73</key_pitch>		<key_pitch>75</key_pitch>		<key_pitch>77</key_pitch>		<key_pitch>78</key_pitch>		<key_pitch>7A</key_pitch>		<key_pitch>7C</key_pitch>		<key_pitch>7D</key_pitch>		<key_pitch>7F</key_pitch>		</key_pitches>		<key_pitchesbuffer>		<key_pitch>0</key_pitch>		<key_pitch>2</key_pitch>		<key_pitch>4</key_pitch>		<key_pitch>5</key_pitch>		<key_pitch>7</key_pitch>		<key_pitch>9</key_pitch>		<key_pitch>B</key_pitch>		</key_pitchesbuffer>		<key_settings>0</key_settings>		<key_startbeat>0</key_startbeat>		<key_stepvalues>		<key_stepvalue>2</key_stepvalue>		<key_stepvalue>2</key_stepvalue>		<key_stepvalue>1</key_stepvalue>		<key_stepvalue>2</key_stepvalue>		<key_stepvalue>2</key_stepvalue>		<key_stepvalue>2</key_stepvalue>		<key_stepvalue>1</key_stepvalue>		</key_stepvalues>		<key_tonic>0</key_tonic>		<key_tonicname>C</key_tonicname>		</key_obj>		</keys>		</songmgr>		<notemgr>		<notes>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>0</musicobj_id>		<musicobj_label>64.0</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>40</note_oldpitch>		<note_currentpitch>40</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>1</musicobj_id>		<musicobj_label>64.24</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>18</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>0</note_chord>		<note_oldpitch>40</note_oldpitch>		<note_currentpitch>40</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>0</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>2</musicobj_id>		<musicobj_label>65.48</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>30</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>41</note_oldpitch>		<note_currentpitch>41</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>3</musicobj_id>		<musicobj_label>67.72</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>48</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>1</note_chord>		<note_oldpitch>43</note_oldpitch>		<note_currentpitch>43</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>1</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>4</musicobj_id>		<musicobj_label>67.96</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>60</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>43</note_oldpitch>		<note_currentpitch>43</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>5</musicobj_id>		<musicobj_label>65.120</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>78</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>2</note_chord>		<note_oldpitch>41</note_oldpitch>		<note_currentpitch>41</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>2</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>6</musicobj_id>		<musicobj_label>64.144</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>90</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>40</note_oldpitch>		<note_currentpitch>40</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>3</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>7</musicobj_id>		<musicobj_label>62.168</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>A8</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>3E</note_oldpitch>		<note_currentpitch>3E</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>3</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>8</musicobj_id>		<musicobj_label>60.192</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>C0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>3C</note_oldpitch>		<note_currentpitch>3C</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_group>3</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>9</musicobj_id>		<musicobj_label>60.216</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>D8</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_oldpitch>3C</note_oldpitch>		<note_currentpitch>3C</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>A</musicobj_id>		<musicobj_label>67.24</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>18</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>0</note_chord>		<note_oldpitch>43</note_oldpitch>		<note_currentpitch>43</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>B</musicobj_id>		<musicobj_label>71.24</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>18</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>0</note_chord>		<note_oldpitch>47</note_oldpitch>		<note_currentpitch>47</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>C</musicobj_id>		<musicobj_label>71.72</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>48</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>1</note_chord>		<note_oldpitch>47</note_oldpitch>		<note_currentpitch>47</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>D</musicobj_id>		<musicobj_label>74.72</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>48</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>1</note_chord>		<note_oldpitch>4A</note_oldpitch>		<note_currentpitch>4A</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>E</musicobj_id>		<musicobj_label>69.120</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>78</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>2</note_chord>		<note_oldpitch>45</note_oldpitch>		<note_currentpitch>45</note_currentpitch>		</note_obj>		<note_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>F</musicobj_id>		<musicobj_label>72.120</musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>78</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<note_chord>2</note_chord>		<note_oldpitch>48</note_oldpitch>		<note_currentpitch>48</note_currentpitch>		</note_obj>		</notes>		<chords>		<chord_obj>		<musicobj_group>1</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>0</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name>E MajorE Major</musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>18</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<chord_notes>		<chord_note>1</chord_note>		<chord_note>A</chord_note>		<chord_note>B</chord_note>		</chord_notes>		<chord_root>1</chord_root>		<chord_rootindex>25</chord_rootindex>		<chord_settings>1</chord_settings>		<chord_stepvalues>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		</chord_stepvalues>		<chord_type>Major=1 3 5</chord_type>		</chord_obj>		<chord_obj>		<musicobj_group>0</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>1</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name>G MajorG Major</musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>48</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<chord_notes>		<chord_note>3</chord_note>		<chord_note>C</chord_note>		<chord_note>D</chord_note>		</chord_notes>		<chord_root>3</chord_root>		<chord_rootindex>27</chord_rootindex>		<chord_settings>1</chord_settings>		<chord_stepvalues>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		</chord_stepvalues>		<chord_type>Major=1 3 5</chord_type>		</chord_obj>		<chord_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>2</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>18</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name>F MajorF Major</musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>78</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3F</musicobj_velocity>		<chord_notes>		<chord_note>5</chord_note>		<chord_note>E</chord_note>		<chord_note>F</chord_note>		</chord_notes>		<chord_root>5</chord_root>		<chord_rootindex>26</chord_rootindex>		<chord_settings>1</chord_settings>		<chord_stepvalues>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		<chord_stepvalue>1</chord_stepvalue>		</chord_stepvalues>		<chord_type>Major=1 3 5</chord_type>		</chord_obj>		</chords>		<groups>		<group_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>0</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>0</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3C</musicobj_velocity>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>2</generic_objectid>		</generic_object>		<generic_object>		<generic_objecttype>C</generic_objecttype>		<generic_objectid>1</generic_objectid>		</generic_object>		</group_obj>		<group_obj>		<musicobj_group>2</musicobj_group>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>1</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>0</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3C</musicobj_velocity>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>4</generic_objectid>		</generic_object>		<generic_object>		<generic_objecttype>C</generic_objecttype>		<generic_objectid>0</generic_objectid>		</generic_object>		</group_obj>		<group_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>2</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>0</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3C</musicobj_velocity>		<generic_object>		<generic_objecttype>G</generic_objecttype>		<generic_objectid>1</generic_objectid>		</generic_object>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>6</generic_objectid>		</generic_object>		</group_obj>		<group_obj>		<musicobj_hidden>0</musicobj_hidden>		<musicobj_id>3</musicobj_id>		<musicobj_label></musicobj_label>		<musicobj_length>0</musicobj_length>		<musicobj_locked>F</musicobj_locked>		<musicobj_name></musicobj_name>		<musicobj_oldlength/>		<musicobj_oldstartbeat>0</musicobj_oldstartbeat>		<musicobj_selected>F</musicobj_selected>		<musicobj_startbeat>F</musicobj_startbeat>		<musicobj_track>0</musicobj_track>		<musicobj_velocity>3C</musicobj_velocity>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>7</generic_objectid>		</generic_object>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>8</generic_objectid>		</generic_object>		<generic_object>		<generic_objecttype>N</generic_objecttype>		<generic_objectid>9</generic_objectid>		</generic_object>		</group_obj>		</groups>		<newnotelength>30</newnotelength>		</notemgr>		'<track_mgr>		'   <colorindex>1</colorindex>		'   <tracks>		'      <track_obj>		'         <track_objects>		'            <generic_object>		'               <generic_objecttype>N</generic_objecttype>		'               <generic_objectid>0</generic_objectid>		'            </generic_object>		'         </track_objects>		'         <track_instrument>1</track_instrument>		'         <track_label></track_label>		'         <track_Name>Track 1</track_Name>		'         <track_play>T</track_play>		'         <track_visible>T</track_visible>		'         <track_visualcue>		'            <color>		'               <color_red>33</color_red>		'               <color_green>33</color_green>		'               <color_blue>99</color_blue>		'           </color>		'         </track_visualcue>		'      </track_obj>		'   </tracks>		'</track_mgr>		<editor>		<editor_snaptovalue>18</editor_snaptovalue>		<editor_zoomx>2</editor_zoomx>		<editor_zoomy>10</editor_zoomy>		<editor_scrollx>0</editor_scrollx>		<editor_scrolly>37</editor_scrolly>		</editor>		</data_root>			#tag EndNote	#tag Note, Name = To Do		[ ] XML_SongMgr			#tag EndNote	#tag Note, Name = Track Addition Management		case FileLib.kXML_Track_Objects_Node				dim theTrack as TrackObj				if thisNode = 0 then				theTrack = ParentWindow.TrackListObj1.CurrentTrack		NoteMgr_SetObjectProperties(theTrack, mNode)				else				ParentWindow.TrackListObj1.AddTrack				theTrack = ParentWindow.TrackListObj1.CurrentTrack		NoteMgr_SetObjectProperties(theTrack, mNode)				end if			#tag EndNote	#tag Property, Flags = &h0		TheFile As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		TheXML As XMLDocument	#tag EndProperty	#tag Property, Flags = &h21		Private XML_ChordNotesNode As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_Editor As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_GroupImportObjects(-1) As GroupImportObj	#tag EndProperty	#tag Property, Flags = &h21		Private XML_GUIObj As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_NoteMgr As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_PlayMgr As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_Root As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_SongMgr As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_TrackMgr As XMLNode	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass