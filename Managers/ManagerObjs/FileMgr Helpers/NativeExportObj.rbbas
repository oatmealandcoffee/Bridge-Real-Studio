#tag ClassProtected Class NativeExportObjInherits ManagerObj	#tag Method, Flags = &h1		Protected Sub CreateEditorControlsData()		  dim EditorNode as XmlNode = XML_AddNode(XML_Root, FileLib.kXML_Editor_Node)		  		  		  'Snap To Value		  dim SnapToValueNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_SnapToValue)		  XML_SetValueToNode(SnapToValueNode, ParentWindow.GUIObj1.SnapTo)		  		  'Zoom		  ' X		  dim ZoomXNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_Zoom_X)		  XML_SetValueToNode(ZoomXNode, ParentWindow.SliderZoomX.Value)		  		  ' Y		  dim ZoomYNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_Zoom_Y)		  XML_SetValueToNode(ZoomYNode, ParentWindow.SliderZoomY.Value)		  		  'Scroll		  //the order matters here...		  'ScrollBar.Maximum		  dim ScrollXMaxNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_ScrollX_Maximum)		  XML_SetValueToNode(ScrollXMaxNode, ParentWindow.xScrollBar.Maximum)		  		  ' Beat		  dim ScrollXNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_Scroll_X)		  XML_SetValueToNode(ScrollXNode, ParentWindow.xScrollBar.Value)		  		  		  		  ' Pitch		  dim ScrollYNode as XmlNode = XML_AddNode(EditorNode, FileLib.kXML_Editor_Scroll_Y)		  XML_SetValueToNode(ScrollYNode, ParentWindow.yScrollBar.Value)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateGUIObjData()		  dim GUIObjNode as XMLNode = XML_AddNode(XML_Root, FileLib.kXML_GUIObj_Node)		  		  dim SnapToNode as XMLNode = XML_AddNode(GUIObjNode, FileLib.kXML_GUIObj_SnapTo)		  XML_SetValueToNode(SnapToNode, ParentWindow.GUIObj1.SnapTo)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateHeader()		  dim ApplicationNode as XmlNode = XML_AddNode(XML_Root, FileLib.kXML_Application_Node)		  		  dim ApplicationName as XmlNode = XML_AddNode(ApplicationNode, FileLib.kXML_Application_Name)		  XML_SetValueToNode(ApplicationName, App.kAppName)		  		  dim ApplicationVersion as XmlNode = XML_AddNode(ApplicationNode, FileLib.kXML_Application_Version)		  dim ApplicationVersionValue as String = XML_IntegerToXML(App.MajorVersion) + "." + XML_IntegerToXML(App.MinorVersion)		  XML_SetValueToNode(ApplicationVersion, ApplicationVersionValue)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateNoteMgrData()		  XML_NoteMgr = XML_AddNode(XML_Root, FileLib.kXML_NoteMgr_Node)		  		  CreateNoteMgrData_Notes		  CreateNoteMgrData_Chords		  CreateNoteMgrData_Groups		  		  dim NewNoteLengthNode as XmlNode = XML_AddNode(XML_NoteMgr, FileLib.kXML_NoteMgr_NewNoteLength)		  XML_SetValueToNode(NewNoteLengthNode, ParentWindow.NoteMgr.NewNoteLength)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Chords()		  dim ChordsArrayNode as XmlNode = XML_AddNode(XML_NoteMgr, FileLib.kXML_NoteMgr_Chords_Node)		  		  dim thisChord as integer = 0		  dim firstChord as integer = 0		  dim lastChord as integer = Ubound(ParentWindow.NoteMgr.Chords)		  		  if lastChord > -1 then		    for thisChord = firstChord to lastChord		      if ParentWindow.NoteMgr.Chords(thisChord) <> nil then		        		        dim mMusicObj as MusicObj = ParentWindow.NoteMgr.Chords(thisChord)		        dim mChord as ChordObj = ParentWindow.NoteMgr.Chords(thisChord)		        dim mChordNode as XmlNode = XML_AddNode(ChordsArrayNode, FileLib.kXML_ChordObj_Node)		        		        CreateNoteMgrData_Object(mMusicObj, mChordNode)		        CreateNoteMgrData_Object(mChord, mChordNode)		        		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Groups()		  dim GroupsArrayNode as XmlNode = XML_AddNode(XML_NoteMgr, FileLib.kXML_NoteMgr_Groups_Node)		  		  dim thisGroup as integer = 0		  dim firstGroup as integer = 0		  dim lastGroup as integer = Ubound(ParentWindow.NoteMgr.Groups)		  		  if lastGroup > -1 then		    for thisGroup = firstGroup to lastGroup		      if ParentWindow.NoteMgr.Groups(thisGroup) <> nil then		        		        dim mMusicObj as MusicObj = ParentWindow.NoteMgr.Groups(thisGroup)		        dim mGroup as GroupObj = ParentWindow.NoteMgr.Groups(thisGroup)		        dim mGroupNode as XmlNode = XML_AddNode(GroupsArrayNode, FileLib.kXML_GroupObj_Node)		        		        CreateNoteMgrData_Object(mMusicObj, mGroupNode)		        CreateNoteMgrData_Object(mGroup, mGroupNode)		        		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Notes()		  dim NotesArrayNode as XmlNode = XML_AddNode(XML_NoteMgr, FileLib.kXML_NoteMgr_Notes_Node)		  		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = Ubound(ParentWindow.NoteMgr.Notes)		  		  if lastNote > -1 then		    for thisNote = firstNote to lastNote		      if ParentWindow.NoteMgr.Notes(thisNote) <> nil then		        		        dim mMusicObj as MusicObj = ParentWindow.NoteMgr.Notes(thisNote)		        dim mNote as NoteObj = ParentWindow.NoteMgr.Notes(thisNote)		        dim mNoteNode as XmlNode = XML_AddNode(NotesArrayNode, FileLib.kXML_NoteObj_Node)		        		        CreateNoteMgrData_Object(mMusicObj, mNoteNode)		        CreateNoteMgrData_Object(mNote, mNoteNode)		        		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Object(Chord as ChordObj, TheNode as XMLNode)		  'Notes(-1)		  dim NotesArrayNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_Notes)		  		  dim thisNote as integer = 0		  dim firstNote as integer = 0		  dim lastNote as integer = UBound(Chord.Notes)		  		  if lastNote > -1 then		    for thisNote = firstNote to lastNote		      if Chord.Notes(thisNote) <> nil then		        		        ' Note		        dim note as NoteObj = Chord.Notes(thisNote)		        dim NoteObjNode as XmlNode = XML_AddNode(NotesArrayNode, FileLib.kXML_ChordObj_Note)		        XML_SetValueToNode(NoteObjNode, note.ID)		        		      end if		    next		  end if		  		  'Root		  dim RootNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_Root)		  XML_SetValueToNode(RootNode, Chord.Root.ID)		  		  dim RootIndexNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_Rootindex)		  XML_SetValueToNode(RootIndexNode, Chord.RootIndex)		  		  'Settings		  dim SettingsNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_Settings)		  XML_SetValueToNode(SettingsNode, Chord.Settings)		  		  'StepValue(-1)		  dim StepValuesNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_StepValues)		  		  dim thisStepValue as integer = 0		  dim firstStepValue as integer = 0		  dim lastStepValue as integer = UBound(Chord.StepValuesString)		  		  if lastStepValue > -1 then		    for thisNote = firstNote to lastNote		      		      ' StepValue		      dim StepValueNode as XmlNode = XML_AddNode(StepValuesNode, FileLib.kXML_ChordObj_StepValue)		      XML_SetValueToNode(StepValueNode, Chord.StepValuesString(thisStepValue))		      		    next		  end if		  		  'Type		  dim TypeNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_ChordObj_Type)		  XML_SetValueToNode(TypeNode, Chord.Type)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Object(Group as GroupObj, TheNode as XMLNode)		  dim GroupObjectsNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_GroupObj_Objects_Node)		  		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Group.Objects)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if Group.Objects(thisObject) <> nil then		        		        dim ObjectType as String		        dim ObjectID as String		        		        if Group.Objects(thisObject) IsA GroupObj then		          dim mGroup as GroupObj = Group.Objects(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Group		          ObjectID = mGroup.ID		        end if		        		        if Group.Objects(thisObject) IsA ChordObj then		          dim mChord as ChordObj = Group.Objects(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Chord		          ObjectID = mChord.ID		        end if		        		        if Group.Objects(thisObject) IsA NoteObj then		          dim mNote as NoteObj = Group.Objects(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Note		          ObjectID = mNote.ID		        end if		        		        dim ObjectNode as XmlNode = XML_AddNode(GroupObjectsNode, FileLib.kXML_Object_Node)		        		        dim ObjectTypeNode as XmlNode = XML_AddNode(ObjectNode, FileLib.kXML_Object_Type)		        XML_SetValueToNode(ObjectTypeNode, ObjectType)		        		        dim ObjectIDNode as XmlNode = XML_AddNode(ObjectNode, FileLib.kXML_Object_ID)		        XML_SetValueToNode(ObjectIDNode, ObjectID)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Object(mMusicObj as MusicObj, TheNode as XMLNode)		  'MusicObj Group		  if  mMusicObj.Group <> nil then		    dim GroupNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Group)		    XML_SetValueToNode(GroupNode, mMusicObj.Group.ID)		  end if		  		  'MusicObj Hidden		  dim HiddenNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Hidden)		  XML_SetValueToNode(HiddenNode, mMusicObj.Hidden)		  		  'MusicObj ID		  dim IDNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_ID)		  XML_SetValueToNode(IDNode, mMusicObj.ID)		  		  'MusicObj Label		  dim LabelNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Label)		  XML_SetValueToNode(LabelNode, mMusicObj.Label)		  		  'MusicObj Length		  dim LengthNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Length)		  XML_SetValueToNode(LengthNode, mMusicObj.Length)		  		  'MusicObj Locked		  dim LockedNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Locked)		  XML_SetValueToNode(LockedNode, mMusicObj.Locked)		  		  'MusicObj Name		  dim NameNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Name)		  XML_SetValueToNode(NameNode, mMusicObj.Name)		  		  'MusicObj NoteMgr //handled on opening		  		  'MusicObj OldLength		  dim OldLengthNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_OldLength)		  XML_SetValueToNode(NameNode, mMusicObj.Name)		  		  'MusicObj OldStartBeat		  dim OldStartBeatNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_OldStartBeat)		  XML_SetValueToNode(OldStartBeatNode, mMusicObj.OldStartBeat)		  		  'MusicObj ParentWindow //handled on opening		  		  'MusicObj Selected		  dim SelectedNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Selected)		  XML_SetValueToNode(SelectedNode, mMusicObj.Selected)		  		  'MusicObj StartBeat		  dim StartBeatNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_StartBeat)		  XML_SetValueToNode(StartBeatNode, mMusicObj.StartBeat)		  		  'MusicObj Track		  dim TrackNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Track)		  XML_SetValueToNode(TrackNode, mMusicObj.Track.ID)		  		  'MusicObj Velocity		  dim VelocityNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_MusicObj_Velocity)		  XML_SetValueToNode(VelocityNode, mMusicObj.Velocity)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateNoteMgrData_Object(Note as NoteObj, TheNode as XMLNode)		  if Note.Chord <> nil then		    'Chord		    dim ChordNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_NoteObj_Chord)		    XML_SetValueToNode(ChordNode, Note.Chord.ID)		  end if		  		  if Note.NextNote <> nil then		    'NextNote		    dim NextNoteNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_NoteObj_NextNote)		    XML_SetValueToNode(NextNoteNode, Note.NextNote.ID)		  end if		  		  'OldPitch		  dim OldPitchNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_NoteObj_OldPitch)		  XML_SetValueToNode(OldPitchNode, Note.OldPitch)		  		  'Pitch		  dim PitchNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_NoteObj_Pitch)		  XML_SetValueToNode(PitchNode, Note.Pitch)		  		  if Note.PreviousNote <> nil then		    'PreviousNote		    dim PreviousNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_NoteObj_PreviousNote)		    XML_SetValueToNode(PreviousNode, Note.PreviousNote.ID)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreatePlayMgrData()		  dim PlayMgrNode as XMLNode = XML_AddNode(XML_Root, FileLib.kXML_PlayMgr_Node)		  		  dim LoopNode as XMLNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_Loop)		  XML_SetValueToNode(LoopNode, ParentWindow.PlayMgr.LoopPlay)		  		  //ParentWindow.PlayMgr.EditCursor		  dim EditCursorNode as XmlNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_EditCursorStart)		  XML_SetValueToNode(EditCursorNode, ParentWindow.PlayMgr.EditCursor.StartBeat)		  		  //ParentWindow.PlayMgr.LoopStartCursor		  dim LoopStartCursorNode as XmlNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_LoopStartCursorStart)		  XML_SetValueToNode(LoopStartCursorNode, ParentWindow.PlayMgr.LoopStartCursor.StartBeat)		  		  //ParentWindow.PlayMgr.LoopStopCursor		  dim LoopStopCursorNode as XmlNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_LoopStopCursorStart)		  XML_SetValueToNode(LoopStopCursorNode, ParentWindow.PlayMgr.LoopStopCursor.StartBeat)		  		  //ParentWindow.PlayMgr.StartCursor		  dim StartCursorNode as XmlNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_StartCursorStart)		  XML_SetValueToNode(StartCursorNode, ParentWindow.PlayMgr.StartCursor.StartBeat)		  		  //ParentWindow.PlayMgr.StopCursor		  dim StopCursorNode as XmlNode = XML_AddNode(PlayMgrNode, FileLib.kXML_PlayMgr_StopCursorStart)		  XML_SetValueToNode(StopCursorNode, ParentWindow.PlayMgr.StopCursor.StartBeat)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateRoot()		  XML_Root = XML_AddNode(SaveData, FileLib.kXML_Root_Node)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateSongMgrData()		  XML_SongMgr = XML_AddNode(XML_Root, FileLib.kXML_SongMgr_Node)		  		  CreateSongMgrData_Keys		  		  //Now we create the nodes for 		  'ParentWindow.SongMgr.Tempo		  dim TempoNode as XmlNode = XML_AddNode(XML_SongMgr, FileLib.kXML_SongMgr_Tempo)		  XML_SetValueToNode(TempoNode, ParentWindow.SongMgr.Tempo)		  		  'ParentWindow.SongMgr.TimeSignatureBasicBeat		  dim BasicBeatNode as XmlNode = XML_AddNode(XML_SongMgr, FileLib.kXML_SongMgr_TimeSignatureBasicBeat)		  XML_SetValueToNode(BasicBeatNode, ParentWindow.SongMgr.TimeSignatureBasicBeat)		  		  'ParentWindow.SongMgr.TimeSignatureBeatsPerMeasure		  dim BeatsPerMeasureNode as XmlNode = XML_AddNode(XML_SongMgr, FileLib.kXML_SongMgr_TimeSignatureBeatsPerMeasure)		  XML_SetValueToNode(BeatsPerMeasureNode, ParentWindow.SongMgr.TimeSignatureBeatsPerMeasure)		  		  'ParentWindow.SongMgr.TotalBeats		  dim TotalBeatsNode as XmlNode = XML_AddNode(XML_SongMgr, FileLib.kXML_SongMgr_TotalBeats)		  XML_SetValueToNode(TotalBeatsNode, ParentWindow.SongMgr.TotalBeats)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateSongMgrData_Keys()		  dim KeysNode as XMLNode = XML_AddNode(XML_SongMgr, FileLib.kXML_Keys_Node)		  		  dim thisKey as integer = 0		  dim firstKey as integer = 0		  dim lastKey as integer = Ubound(ParentWindow.SongMgr.Keys)		  if lastKey > -1 then		    for thisKey = firstKey to lastKey		      if ParentWindow.SongMgr.Keys(thisKey) <> nil then		        		        dim mKey as KeyObj = ParentWindow.SongMgr.Keys(thisKey)		        dim KeyObjNode as XmlNode = XML_AddNode(KeysNode, FileLib.kXML_KeyObj_Node)		        		        'Key		        dim KeyObjKeyNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_Constant)		        XML_SetValueToNode(KeyObjKeyNode, mKey.Key)		        		        'Modifier		        dim KeyObjModifierNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_Modifer)		        XML_SetValueToNode(KeyObjModifierNode, XML_IntegerToXML(mKey.Modifier))		        		        'Pitches(-1)		        dim KeyObjPitchesNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_Pitches_Node)		        		        dim thisPitch as integer = 0		        dim firstPitch as integer = 0		        dim lastPitch as integer = Ubound(mKey.Pitches)		        if lastPitch > -1 then		          for thisPitch = firstPitch to lastPitch		            'Pitch		            dim KeyObjPitchValueNode as XmlNode = XML_AddNode(KeyObjPitchesNode, FileLib.kXML_KeyObj_Pitch)		            XML_SetValueToNode(KeyObjPitchValueNode, XML_IntegerToXML(mKey.Pitches(thisPitch)))		          next		        end if		        		        'PitchesBuffer(-1)		        dim KeyObjPitchesBufferNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_PitchesBuffer_Node)		        		        thisPitch = 0		        firstPitch = 0		        lastPitch = Ubound(mKey.PitchesBuffer)		        if lastPitch > -1 then		          for thisPitch = firstPitch to lastPitch		            'Pitch		            dim KeyObjPitchBufferValueNode as XmlNode = XML_AddNode(KeyObjPitchesBufferNode, FileLib.kXML_KeyObj_Pitch)		            XML_SetValueToNode(KeyObjPitchBufferValueNode, XML_IntegerToXML(mKey.PitchesBuffer(thisPitch)))		          next		        end if		        		        'Settings		        dim KeyObjSettingsNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_Settings)		        XML_SetValueToNode(KeyObjSettingsNode, XML_IntegerToXML(mKey.Settings))		        		        'Song //this has to be handled manually on opening the file		        		        'StartBeat		        dim KeyObjStartBeatNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_StartBeat)		        XML_SetValueToNode(KeyObjStartBeatNode, XML_IntegerToXML(mKey.StartBeat))		        		        'StepValue(-1)		        dim KeyObjStepValueStringNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_StepValueString_Node)		        		        dim thisStep as integer = 0		        dim firstStep as integer = 0		        dim lastStep as integer = Ubound(mKey.StepValuesString)		        		        if lastStep > -1 then		          for thisStep = firstStep to lastStep		            'StepValue		            dim KeyObjStepValueNode as XmlNode = XML_AddNode(KeyObjStepValueStringNode, FileLib.kXML_KeyObj_StepValue)		            XML_SetValueToNode(KeyObjStepValueNode, mKey.StepValuesString(thisStep))		          next		        end if		        		        'Tonic		        dim KeyObjTonicNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_Tonic)		        XML_SetValueToNode(KeyObjTonicNode, XML_IntegerToXML(mKey.Tonic))		        		        'TonicName		        dim KeyObjTonicNameNode as XmlNode = XML_AddNode(KeyObjNode, FileLib.kXML_KeyObj_TonicName)		        XML_SetValueToNode(KeyObjTonicNameNode, mKey.TonicName)		        		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateTrackListData_Object(Track as TrackObj, TheNode as XMLNode)		  dim TrackObjectsNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_Track_Objects_Node)		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(Track.Music)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if Track.Music(thisObject) <> nil then		        		        dim ObjectType as String		        dim ObjectID as String		        		        if Track.Music(thisObject) IsA GroupObj then		          dim mGroup as GroupObj = Track.Music(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Group		          ObjectID = mGroup.ID		        end if		        		        if Track.Music(thisObject) IsA ChordObj then		          dim mChord as ChordObj = Track.Music(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Chord		          ObjectID = mChord.ID		        end if		        		        if Track.Music(thisObject) IsA NoteObj then		          dim mNote as NoteObj = Track.Music(thisObject)		          ObjectType = FileLib.kXML_ObjectType_Note		          ObjectID = mNote.ID		        end if		        		        dim ObjectNode as XmlNode = XML_AddNode(TrackObjectsNode, FileLib.kXML_Object_Node)		        		        dim ObjectTypeNode as XmlNode = XML_AddNode(ObjectNode, FileLib.kXML_Object_Type)		        XML_SetValueToNode(ObjectTypeNode, ObjectType)		        		        dim ObjectIDNode as XmlNode = XML_AddNode(ObjectNode, FileLib.kXML_Object_ID)		        XML_SetValueToNode(ObjectIDNode, ObjectID)		        		      end if		    next		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CreateTrackListObjData()		  dim TrackMgrNode as XMLNode = XML_AddNode(XML_Root, FileLib.kXML_TrackMgr_Node)		  		  'ColorIndex		  dim ColorIndexNode as XmlNode = XML_AddNode(TrackMgrNode, FileLib.kXML_TrackMgr_ColorIndex)		  XML_SetValueToNode(ColorIndexNode, ParentWindow.TrackListObj1.ColorIndex)		  		  'Tracks		  dim TracksNode as XmlNode = XML_AddNode(TrackMgrNode, FileLib.kXML_Tracks_Node)		  		  dim thisTrack as Integer = 0		  dim firstTrack as Integer = 0		  dim lastTrack as Integer = ParentWindow.TrackListObj1.ListCount - 1		  		  for thisTrack = firstTrack to lastTrack		    		    dim theTrack as TrackObj = ParentWindow.TrackListObj1.CellTag(thisTrack, 0)		    		    if theTrack <> nil then		      		      'Track		      dim TrackNode as XmlNode = XML_AddNode(TracksNode, FileLib.kXML_Track_Node)		      CreateTrackListObjData(theTrack, TrackNode)		      		    end if		  next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub CreateTrackListObjData(Track as TrackObj, TheNode as XMLNode)		  'Instrument		  dim InstrumentNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_Instrument)		  XML_SetValueToNode(InstrumentNode, Track.Instrument)		  		  'Label		  dim LabelNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_Label)		  XML_SetValueToNode(LabelNode, Track.Label)		  		  'Name		  dim NameNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_Name)		  XML_SetValueToNode(NameNode, Track.Name)		  		  'Play		  dim PlayNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_Play)		  XML_SetValueToNode(PlayNode, Track.Play)		  		  'Visible		  dim VisibleNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_Visible)		  XML_SetValueToNode(VisibleNode, Track.Visible)		  		  'VisualCue		  dim VisualCueNode as XMLNode = XML_AddNode(TheNode, FileLib.kXML_Track_VisualCue)		  XML_SetValueToNode(VisualCueNode, Track.VisualCue)		  		  CreateTrackListData_Object(Track, TheNode)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub GetSaveLocation()		  if File <> nil then		    		    SaveData = New XmlDocument		    		  else		    		    return		    		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Save()		  GetSaveLocation		  		  if File <> nil and SaveData <> nil then		    		    SerializeObjects		    		    CreateRoot		    CreateHeader		    CreateSongMgrData		    CreateNoteMgrData		    CreateTrackListObjData		    CreateEditorControlsData		    CreateGUIObjData		    CreatePlayMgrData		    		    WriteSaveData		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SerializeChords()		  'ParentWindow.ChordMgr.Chords		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(ParentWindow.NoteMgr.Chords)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if ParentWindow.NoteMgr.Chords(thisObject) <> nil then		        dim mChord as ChordObj = ParentWindow.NoteMgr.Chords(thisObject)		        mChord.ID = XML_IntegerToXML(thisObject)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SerializeGroups()		  'ParentWindow.GroupMgr.Groups		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(ParentWindow.NoteMgr.Groups)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if ParentWindow.NoteMgr.Groups(thisObject) <> nil then		        dim mGroup as GroupObj = ParentWindow.NoteMgr.Groups(thisObject)		        mGroup.ID = XML_IntegerToXML(thisObject)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SerializeKeys()		  'ParentWindow.NoteMgr.Notes		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(ParentWindow.SongMgr.Keys)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if ParentWindow.SongMgr.Keys(thisObject) <> nil then		        dim mKey as KeyObj = ParentWindow.SongMgr.Keys(thisObject)		        mKey.ID = XML_IntegerToXML(thisObject)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SerializeNotes()		  'ParentWindow.NoteMgr.Notes		  		  dim thisObject as integer = 0		  dim firstObject as integer = 0		  dim lastObject as integer = Ubound(ParentWindow.NoteMgr.Notes)		  		  if lastObject > -1 then		    for thisObject = firstObject to lastObject		      if ParentWindow.NoteMgr.Notes(thisObject) <> nil then		        dim mNote as NoteObj = ParentWindow.NoteMgr.Notes(thisObject)		        mNote.ID = XML_IntegerToXML(thisObject)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub SerializeObjects()		  SerializeNotes		  SerializeChords		  SerializeGroups		  SerializeKeys		  SerializeTracks		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SerializeTracks()		  dim thisTrack as integer = 0		  dim firstTrack as integer = 0		  dim lastTrack as integer = ParentWindow.TrackListObj1.ListCount - 1		  		  for thisTrack = firstTrack to lastTrack		    dim theTrack as TrackObj = ParentWindow.TrackListObj1.CellTag(thisTrack, 0) 		    theTrack.ID = XML_IntegerToXML(thisTrack)		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub WriteSaveData()		  dim TOS as TextOutputStream = File.CreateTextFile		  		  TOS.Write(FileLib.PrettyPrint(SaveData))		  		  TOS.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_AddNode(ParentNode as XMLNode, NewNodeTagName as string) As XMLNode		  return ParentNode.AppendChild(SaveData.CreateElement(NewNodeTagName))		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function XML_IntegerToXML(Value as integer) As String		  return Str(Value)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_SetValueToNode(TheNode as XMLNode, TheValue as Boolean)		  If TheValue = true then		    TheNode.AppendChild(SaveData.CreateTextNode(FileLib.kXML_Datatype_Boolean_True))		  else		    TheNode.AppendChild(SaveData.CreateTextNode(FileLib.kXML_Datatype_Boolean_False))		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_SetValueToNode(TheNode as XMLNode, TheValue as Color)		  dim ColorNode as XmlNode = XML_AddNode(TheNode, FileLib.kXML_DataType_Color)		  		  ' Red		  dim ColorRedNode as XmlNode = XML_AddNode(ColorNode, FileLib.kXML_DataType_Color_Red)		  XML_SetValueToNode(ColorRedNode, TheValue.Red)		  		  ' Green		  dim ColorGreenNode as XmlNode = XML_AddNode(ColorNode, FileLib.kXML_DataType_Color_Green)		  XML_SetValueToNode(ColorGreenNode, TheValue.Green)		  		  ' Blue		  dim ColorBlueNode as XmlNode = XML_AddNode(ColorNode, FileLib.kXML_DataType_Color_Blue)		  XML_SetValueToNode(ColorBlueNode, TheValue.Blue)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_SetValueToNode(TheNode as XMLNode, TheValue as Integer)		  TheNode.AppendChild(SaveData.CreateTextNode(XML_IntegerToXML(TheValue)))		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub XML_SetValueToNode(TheNode as XMLNode, TheValue as String)		  TheNode.AppendChild(SaveData.CreateTextNode(TheValue))		End Sub	#tag EndMethod	#tag Note, Name = BrainStorm				Opening a document		Read in file		Create Window Editor		Get Song Info		Set Song Info		Remove Default Key Obj		Create Key Obj		populate Key Obj				Populate NoteMgr		Create All NoteObjs		Create Chords		Create Groups		Create links between objects		Update WindowEditor		Create Tracks		Populate Music Array		Update Controls		Editor Controls		New Note		Snap To		Zoom		Scroll		Song Controls		Tempo		Beats Per Measure		Basic Beat						RefreshParentWindow			#tag EndNote	#tag Property, Flags = &h0		File As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected SaveData As XMLDocument	#tag EndProperty	#tag Property, Flags = &h21		Private XML_NoteMgr As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_Root As XMLNode	#tag EndProperty	#tag Property, Flags = &h21		Private XML_SongMgr As XMLNode	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass